[{"content":"\rNotes About Circuitry Pre-read Before I begin the notes, the main things I have questions on are:\nDo batteries have resistance; why can my microcontroller supply a 5/3v voltage, but not very high amps?\nHow do resistors stop current flow; do they also reduce voltage?\nHow do I understand intutively and deeply how electricity flows?\nHow do I understand the current and voltage at every part of a circuit?\nIntuitively, what does current vs. voltage do?\nTheory Current Current is the amount of charge flowing past a point per unit time. If we have a point \u0026lsquo;A\u0026rsquo; in space, the current is how much charge passes through, in how much time:\n$$ I_{avg}=\\frac{\\Delta Q}{\\Delta t} $$\nFurthermore, we take the limit: $\\lim_{t \\to 0} \\frac{\\Delta Q}{\\Delta t}$ in order to get the approximate current at exactly a specific time (we would measure a small amount of current over a very small time period).\nThe unit we use is columbs per second which is also an ampere. A coloumb is a unit of charge (electrons).\nThe \u0026lsquo;current\u0026rsquo; we are talking about are free electrons from conductors such as copper moving through the wire, which can move because metals have free electrons in their outer-shells. The charge on one electron/proton is:\n$$ Q_{electron} = (-e) = -1.60210^{-19} \\ Q_{proton} = (+e) = +1.60210^{-19} $$\nOverall, the conductor will have a neutral charge; the atoms have the same amount of protons and electrons.\nWhen one amp passes through a wire, we have 1/(e) electrons passing through that point, which is how many electrons make a coloumb (smaller charge=more electrons).\nHere are some common things, and how much current they use (remember, current isn\u0026rsquo;t the whole story!)\nMicrowave= 8 to 13A Electric fan/TV: 1A Advanced low-power chip: less than one micro amp! Mobile phone: 200ma Batteries Before we go into any more detail, let\u0026rsquo;s try to understand this fundamental source of energy, that harnesses chemical energy, and turns it into electrical energy.\nWe have two sides of the battery: the anode, and the cathode. The cathode is the positive side, which would be a metal that is more likely to \u0026lsquo;want\u0026rsquo; an electron to be in a stable state, while the anode is the negative part that \u0026lsquo;wants to give electrons\u0026rsquo; to be more stable.\nHowever, the atoms are stable as they are, and need some \u0026rsquo;liberating\u0026rsquo; force before they are able to move from the cathode to the anode; this is why we have some acidic solution/electrolyte that \u0026lsquo;removes\u0026rsquo; electrons from the solution.\nThen once we start taking electrons from the metals, we are able to add more through the wire, and therefore have some current-flow!\nThis is very oversimplified, and ignores a lot of chemistry, but hopefuly it provides a basic idea for what a battery is doing, and how it could provide an electromotive force.\nModern batteries like lithium batteries also use ingenius design to be rechargable!\nVoltage Now, if we apply a battery across a wire, we will generate a force that \u0026lsquo;pushes\u0026rsquo; the electrons to be in the more positive side of the wire, due to chemical force we described above.\nThis is called an electromagnetic force, and is voltage. Think of voltage as the magnitude of the force, but not the overall potential energy (it could be only a short, high-voltage).\nOne can imagine voltage, as being determined by the strength of the battery.\nWhile a larger surface area would just cause more potential electrons to be swapped (longer battery life), a higher voltage would be acheived only by choosing more negative/positive/reactive metals. Each electron would experience a stronger \u0026lsquo;driving force\u0026rsquo;.\nAnother way to view the force, is that electric charges get built up at the negative terminal of the battery. These charges then \u0026lsquo;push\u0026rsquo; eachother to the positive side, and cause a chain reaction throughout the wire \u0026lsquo;pushing\u0026rsquo; each other electron to the positive terminal, where they are attracted. Furthermore, it could be imagined that deeper in the circuit, the electrons feel less of a \u0026lsquo;push\u0026rsquo;, as there are objects in the way that may repel (somehpow) the original force. A deeper understanding of circuitry, and electromagnetic theory is requiered to understand this.\nIt is just important to know that voltage is associated with the amount of \u0026lsquo;push\u0026rsquo; the electrons experience, or how \u0026rsquo;eager\u0026rsquo; they are to get to the positive region/away from the negative region.\nVoltage can be defined as:\n$$ V_{AB} = \\frac{U_{AB}}{q} $$\nwhere AB is the difference between points A and B, u is the potential energy, and b is the charge.\nIntuitvely, if we have a very high potential for energy, and a very small amount of charge, the voltage is very large; a few electrons (charges) are making a lot of energy!\nNote that usually just \u0026lsquo;V\u0026rsquo; is used; the fact that it is a difference between two points is always implied.\nWe can also note that this voltage formula implies that the energy generated is equal to the voltage times the charge; where if we have 1 amp and 2 volts, we generate 2 j/s.\nWe can define a volt as providing enough potential difference to give 1 coloumb of charge one joule of energy.\nvoltage drop When energy is used in the circuit (IE 3v for an LED), voltage is used up, and there is less potential energy than before. Furthermore in different parts of the LED, the voltage will be different, and larger depending on how different their potential energies are.\nThe intuition behind this, is that we are using some of the electrons energy up by doing some work, or producing something. Therefore, although our battery terminals will have the same voltage, voltage across the circuit will vary, depending on \u0026lsquo;how much\u0026rsquo; the electron has done.\nWe refer to this as a voltage drop: for example, our conductors have very low voltage-drop since the electrons are not doing any work (ideally), but an LED that takes up a lot of energy, will have a high voltage drop (electrons before the LED have much more energy than the electrons that have \u0026lsquo;used it up\u0026rsquo; going through the LED).\nI like to think of the whole thing as having some magnetic/eletric \u0026lsquo;driving force\u0026rsquo; which continually pushes a current, but the amount of voltage, or energy in the electrons is finite, and can be used up while they are being pushed. While in reality it is more complex, this continous flow, and stored energy is a good practical analogy.\nCombining Batteries/Power Sources If we wanted a larger voltage than one battery alone would give, and we had two batteries, we can connect them in series, and their voltage adds. The intuition behind this, is that now getting electrons from each battery want to flow. Note that sometimes we use a refrence \u0026lsquo;ground\u0026rsquo; point as zero volts, this makes reading circuits easier at times, but just remember that always voltages are relative, and current is flowing from one end of a battery to its own other.\nWater Analogy to Voltage For practical purposes, water can be a great analogy for voltage.\nWe could look at the voltage source (IE battery) as a water pump, and then wires as tubes through which the water flowed. The voltage could be seen as \u0026lsquo;water pressure\u0026rsquo;; the water pressure before it preforms work on a load would be high, and then afterwords, it would have lower pressure (imagine some being dissapated into the environemnt).\nfurthermore, we can extend this analogy to how more water \u0026lsquo;pressure\u0026rsquo; induces more current to flow for a point, and the overall flow reamins constant, and proportional to the resistance.\nWe can imagine this is on a chemical level, because more electrons are propelling eachother, and each electron therefore has a greater potential energy.\nConduction Conductors such as copper, and other metals form structures that allow for free-flowing electrons from the valence shells of the different atoms, due to the atomic properties of these metals.\nAlthough the electrons are \u0026lsquo;free\u0026rsquo; inside the metal, they do not escape due to the attractice forces of the positive metal ions in the structure of the metal atom.\nWhen a voltage is applied across a conductor, an electric field travels at about the speed of light across the wire, pushing all electrons at the same time, and applying a force to them.\nResistance/Conductivity Georg Simon Ohm found that, expirimentally, resistance is inversley proportional to how much current flows through a wire, given a constant voltage.\nThis is known as ohms law: $1\\Omega = 1V/1A$.\nHowever, this is not necessarily a \u0026rsquo;law\u0026rsquo;, but rather a macroscopic property that arises in materials. Some materials don\u0026rsquo;t even obey this law.\nFurthermore, in wires resistance is proportional to the length (inversly) and the cross-sectional area (more space for electrons to flow). This can partially be explained, because there are less electrons flowing in a thicker wire per unit area, meaning less on-average collisions.\nConductivity/Resistivity Reisitivity is defined as $\\rho=R\\frac{A}{L}$ which is the inherent \u0026lsquo;resistivness\u0026rsquo; of a material. Conductivity is simply the inverse.\nFurthermore, metals can follow this law:\n$$ \\rho=\\rho_{0}\\left[ 1+\\alpha(T-T_{0}) \\right] $$\nwhich just means temperature linearly scales resistance by some constant.\nWhat Explains different resistances? Different atoms have a different number of valence shells that electrons can lie within. If a given material has a partially empty band, it will much more easily give/take electrons, because it doesn\u0026rsquo;t have to jump a \u0026lsquo;gap\u0026rsquo; to the next levels.\nHeat and Power Now that we understand the macro-level workings of circuits, we can calculate the amount of energy used to be converted to heat in a circuit. If we have a circuit with 0.1 Amps, and 10 volts, and one \u0026lsquo;black box\u0026rsquo;, assuming the black box is a resistor, we can calculate that it takes up 1j/s of power (1 watt).\nOften, a useful trick is done, which is to treat any load as a resistor, and preform circuit anaylsis this way.\nBasic Electric Circuits If we connect elements in series, the same current is doing work over all of those elements, and each of their voltages must add up to the overall voltage.\nHowever, if in parallel, the current splits up, with the same-voltage.\nOther components Some elements in circuits do not obey ohms law (LED\u0026rsquo;s for example, use almost the same amount of voltage no matter what), and therefore we must account for this in our calculations, treating components as kind of resistors, when caluclating there power requirements/doing circuit analysis.\nResistors are a special case where current varies linearly with voltage, however with some components, increasing the does not mean a decrease in \u0026lsquo;work done\u0026rsquo; (a lot of volt drop, not a lot of resistivity). In this sense, resistors are just components that happen to work nicely, because V=IR. Therefore we can use them to help us regulate voltage/current flow in circuits.\nGround When talking about ground, and using the above symbol, one can mean either the negative battery-terminal, a refrence 9-voltage point, or the actual earth\u0026rsquo;s ground.\nThe most simple example is when ground is just the negative terminal of the battery, and we define every other voltage relative to this.\nAnother example is when we choose a point to be 0v that has \u0026rsquo;negative\u0026rsquo; voltage relative to it; that would push electrons in the opposite direction. This could be handy if we were monitoring a sinusodial current that when positive and negative.\nEarth-ground However, a true ground would be considered earth, where charges cancel out to be exactly zero. Someone would literally stick a metal rod in earth in order to take high-voltage and drive it into the earth.\nThe reason this is important, is because multiple devices can share a common refrence point, even if they are connected to multiple different power-sources, they can always measure against 0V.\nFor example, if we want to measure the difference between one device and another, or even if we want to power two devices that are close (and don\u0026rsquo;t want a potential difference, so some charge transfer may accidentally happen), we would benefit from a common ground.\nBut why?\nWell, for the example when we\u0026rsquo;re measuring something with a different powersupply, sharing a \u0026lsquo;common ground\u0026rsquo; is intuitive. If we are just measuring the raw voltage with no ground, we will get very unstable measurements, because even though both terminals of the other supply may be changing, we don\u0026rsquo;t have acess to this (relative) information, we only have our ground to compare with, and by definition, voltage is a relative comparison. Therefore, if we simply plug in the other ground, we get stable voltage.\nHere are two measurementsfrom my ESP32, the first with a common ground, the second without:\nThen, why does having common ground help in other cases, when we\u0026rsquo;re not just measuring? Well, the idea is that if an electrical component fails, having all components connected to a common ground, means that the current will immediately flow to the ground of the earth, with near zero resistance, and it won\u0026rsquo;t have any reason to go through a humans body!\nTo summarize, the ground can either be refrence points between measuring equipments, in order to measure relative amounts, and allow current to flow, and we also have a ground wire that connects into the earth (and back to the electrical component), in order to prevent shock in the case of failure. (it prevents shock, because it acts as very low resistance, and therefore, there will be very low voltage across it, and verys small power, the batteries internal resistance takes it all).\nThe correct wiring, is to connect ground to the negative terminal (electrons flow to earth from here).\nThere are different signals for chasis (negative metal frame everything is connected to), and earth ground symbols, however they are often confused.\nNoise in grounding: Ideally, we would have all parts of a circuit flow back through a common ground. This is usually acheived through having one long thick peice of wire that can carry the sum of all the currents.\nWe want to do this, because having multiple grounds can cause errors in voltage-readings at different points, and if we use one ground, we can have one refrence for everything.\nAnalog vs. digital grounds Digital voltages may spike at times, when, for example, the resistance of one component changes (therefore, the resistance across other components will change), while analog circuits can also experience this change in voltage.\nTherefore, it is common practice to keep the AC/DC grounds \u0026rsquo;locally\u0026rsquo; seperated, and only connect them at one point in the circuit.\nAs we expiriment with circuits in the future, we will see the practical use and understand these concepts deeper!\nSeries and Parallel When thinking about elements in series, we are simply adding the resistance, and adding the voltage across the elements; the \u0026lsquo;same electrons\u0026rsquo; are being used to drive a force.\nHowever, in parallel electrons go down one of multiple paths, and do so relative to the resistivity of those paths. However, in choosing a path, voltage does not change; therefore the voltage across the two paths will be the same (but current split).\nThis applies for any number of paths, and voltages.\nResistance in parallel If we want to find the total resistance in parallel, we can take two steps:\nFind relative amount of charge that flows to each pathway Find average resistance based on proportion of charges that flowed through this resistance which comes out to be:\n$$ \\frac{1}{n}\\sum_{x}^{n}\\frac{1}{\\frac{\\cancel{R_{x}}}{\\sum_{x}^{n}R_{x}}\\cdot \\cancel{R_{x}}} $$\nwhich is usually expressed as:\n$$ \\frac{1}{\\frac{1}{R_{1}}+\\frac{1}{R_{2}}+\\frac{1}{R_{3}}\u0026hellip;} $$\nWhich may seem like a lot, but is really just calculating the proportion of electrons going in each direction, and then getting the resistance based on this, which lends itself to this nice equation.\nWhich intuitively shows how if we have some low-resistance paths that most electrons go to, there will be low overall resistance, however for high-resistance paths only electrons will experience high resistance on average.\nFurthermore, the more paths we have, no matter what the less resistance.\nHowever, it\u0026rsquo;s important to note that this isn\u0026rsquo;t exactly an average. The more paths, the smaller the resistance, even if the resistance is the same across each path. This can also be formulated as\n$$ I_{total}=I_{1}+I_{2}+\u0026hellip;+I_{n} $$\nwhich is the sum of currents,\n$$ =V_{1}/R_{1}+V_{2}/R_{2}+\u0026hellip;+V_{n}/R_{n} $$\nand because they\u0026rsquo;re in parallel\n$$ =V_{total}/R_{1}+V_{total}/R_{2}+\u0026hellip;+V_{total}/R_{n} $$\nwhich can be factored out as\n$$ R_{total} = \\frac{1}{\\frac{1}{R_{1}}+\u0026hellip;+\\frac{1}{R_{n}}} $$\nthe idea behind this is that we are solving for the resistance at each step given we know the currents proportionality and the constant-voltage.\nMore inuitively, it gives us a concrete way to express how, for splitting up the voltage into multiple parts, we can drive n times the power, if we just add more resistors in parallel of the same-rating (because the current in has to equal the current out, the overall resistance lowers to account for the individual V=IRs).\nTo summarize, the resistance in parallel formula is just making sure V=IR is obeyed for each parallel part of the circuit.\nResistors in Series Resistors in series, intuitively add their resistance, and each take up a voltage proportional to their resistance relative to the whole!\nVoltage Dividers An important thing we can do with resistors in series, is divide the voltage. We could, for example take a 10 volt battery, and split it into 5 volts, and connect an LED to ground and across a resistor in the middle, to get this desired 5 volt affect.\nThe intuition behind this, is that we are using electrons while they have around halve of their total potential energy (or any other amount that we can easily vary with resistance).\nKirkhoffs law Although this is intutivive, it is an important rule of thumb:\nSum of voltages in series of components is equal to overall voltage Sum of current entering a junction must equal sum of individual currents flowing through each part (flowing out) The 10% rule When we pick something like an LED to be across the V-OUT, that has practically zero resistance, we\u0026rsquo;ll need to divide the current between the resistor and the element we choose.\nTherefore, a handy trick when calculating the desired resistance to divide a circuit is the 10% rule.\nHere is how I understand it:\nknow the desired voltage and current of a component For a voltage divider, calculate the resistance at a given point, such that with the desired voltage, the resistor draws 10% of the amps necessary for the component Calculate the other resistance for the other part of the voltage division: component + 10% of component amps, at the desired voltage While this at first may seem arbitrary, it is actually designing a series resistor such that one of the resistors, which is a parallel resistor, draws the right amount of current where the component is, with the correct amount of voltage; and the resistor component only takes up ~10% of power (in series). This is a good quick rule to calculate values for resistors in a voltage divider circuit.\nSince V=IR always holds, if we know the current that we want to draw from each resistor in series, and know the voltage that will be across them, we can simply use V=IR for each resistor individually, and things will work out, as the overall-resistance is just derived from this.\nThen for the LED component, we could add a 1/10th of the resistance at the junction, so everything would work out (since LED\u0026rsquo;s need current to be limited).\nMultiple voltage Dividers In this problem, when we calculate our resistances, we need to look at the problem a little more generally. We may have multiple resistors, which have components connected across 1 or multiple.\nOur bleeder current will be the total current that we need to supply across all voltages, we want 1/10th of this remaining in the final resistor. Intiuitively, this can be seen as each step giving some of its \u0026lsquo;bleedage\u0026rsquo; to compound out until the final.\nThen, we just calculate the current across individual components (using kirkhoffs rule), given the voltages, and find the resistances.\nBasically, we have designed a circuit that accounts for multiple componenets at different voltages, created by different resistors, and make sure they get the correct amount of current with ohms laws.\nI like to think of it as just desinging a circuit such that everything flows down at each junction in the right amount.\nAnother thing to keep in mind, is that we can run voltage from other components through the final components, if it can take it. This simplifies our circuit design, and the voltages are still the same.\nSomething that is also important to know, is that for multiple current sources, once we \u0026lsquo;use\u0026rsquo; the voltage of one current source (it must still be connected to ground), we can actually re-use this through another voltage-point, it will be just be like re-routing our current (since the electrons don\u0026rsquo;t actually travel that fast, and we\u0026rsquo;re just using them to do work).\nVoltage and Current sources Ideal voltage source An ideal voltage source would supply any voltage, regardless of the loads resistance. An ideal voltage source would have no internal resistance, and supply constant voltage to any resistance. This is infeasable, because there is some internal resistance in a battery.\nWhat this means intuitively, is that we could not draw a lot of current from a battery (low $R_{Load}$), because electrical reactions happen at a certain pace, and eventually will act as a kind of resistor, resisting the amount of voltage, and therefore current, that is supplied.\nThe voltage can be seen as a series resistor in an unideal source:\n$$ V_{Load}=V_{Total} \\ \\cdot \\frac{R_{Load}}{R_{Load}+R_{Source}} $$\n$R_{Source}$ should approach zero in an ideal voltage source.\nIdeal Currrent source On the other hand, an ideal current source is a source that provides a steady amount of current, given different resistances. This means, the terminal voltage will scale up/down as needed, given different resistances.\nWe can think of this as a current source, with the internal, and load resistances in parallel. If the internal reistance is high, then most of the current will flow to the load, no matter what (given the load has a smaller internal resistance).\nHere would be the formula for this model:\n$$ I_{Load}=I_{Total} \\ \\cdot \\frac{R_{Source}}{R_{Load}+R_{Source}} $$\nFor any resistance in the load, the internal resistance must be high enough to force all of the charge flow through the load. Furthermore, for the source to be ideal, it must adapt to a changing $R_{Load}$ by increasing the voltage, and therefore providing the same amount of current.\nAn approximation of an ideal current source would be a very large voltage source, in series with a very large resistor. For any smaller load resistance, the current would barely change, but the voltage would scale up. This is because while ohms law \u0026lsquo;gives\u0026rsquo; it twice the voltage for it\u0026rsquo;s resistance, the current barely changes, as it is mostly dictated by the larger resistor.\nUsually, batteries are modeled as voltage sources, because more or less, batteries have a small internal resistance, and supply a relatively constant voltage, with varying current (although this breaks down at large currents).\nIdeal current sources mostly just serve as usefull models; what if our current was constant and didn\u0026rsquo;t change?\nBelow we can see for a real (non-ideal) voltage sources, how more current (less resistance) results in a breakdown, while for the non-ideal current source, more voltage (and therefore resistance) results in the same.\nFurthermore, it is important to note, that any battery/voltage supply can be modeled as both an ideal current and voltage source, we just change it into a parallel circuit. This works, because:\nThe common theme is that for a high voltage, and high power, real sources break down, as they have physical limitations.\nTo summarize, real voltage sources like batteries have some internal resistance, and therefore for a large enough current, most voltage will be used in the internal resistance (acts like a resistor in series). While real current sources cannot provide steady current for high resistances, as this would require more power and voltage. We can model non-ideal voltage sources with resistors in series (limiting internal resistance), and current sources with resistors in parallel (limiting max. current).\\\nWe use these to try to understand the behaviour of batteries and current supplies in their operating ranges. It is important to understand however, that no source is ideal, and the conditions which make it less ideal (more current for a non-ideal voltage source).\nTranslating between One last sidenote, is that any source with internal resistance can be expressed as an current or voltage source.\nWe basically can use this same series model, and say that something with high internal resistance and a low relative $R_{Load}$ is close to an ideal current source, while an ideal voltage source is more like a battery, with low internal resistance.\nDon\u0026rsquo;t be confused by the parallel current example, it is basically showing given that we have a current that we can fix by approximating an ideal current source, we can model it in parallalel, and calculate how much is \u0026lsquo;stolen\u0026rsquo; by the internal resistance based on how much larger the internal resistance is compared to $R_{Load}$. For example, if we had a resistor in series with 1m V and 1M $\\Omega$, given a load resistance of 100k, we wouldn\u0026rsquo;t be too much of an ideal current source (100k is a good proportion of overall reistance).\nIn fact, this can be modeled by the parallel example, we wanted 1 Amp ideally, we added a 10% resistance, so we only get one amp (in the series perspective) $R_{Total} = R_{s}+R_{Load}$ so we have 1/1.1 amps flowing. From the parallel perspective, we had one amp, but some of that is not flowing to the load:\n$$ I_{Load}=I_{Total} \\ \\cdot \\frac{R_{Source}}{R_{Load}+R_{Source}} $$\nso therefore, we have the same result, 1/1.1 amps flowing to the load! I think this is pretty cool, that with these very different interpretations, we can get the same result.\nI like to think of this as the parallel example showing how much ideal voltage is \u0026lsquo;stolen\u0026rsquo; by a lack of large internal resistance (current flow inversly proportional to amount of resistance). The loads resistance in the series example contributes to the overall resistance by $\\frac{R_{Load}}{R_{Total}}$, while the current in the parallel example is proportional to $\\frac{R_{Total}}{R_{Load}}$.\nThe key mathematical formula linking them, is that for the series model, we have the current being influenced by the load proportional to:\n$$ \\frac{R_{Load}}{R_{s}+R_{Load}} $$\nwhile in the series example, the amount of current flowing away is also:\n$$ \\frac{R_{Load}}{R_{s}+R_{Load}} $$\nthis is the key intuition behind why both models can be used: the series show how much current is \u0026lsquo;removed\u0026rsquo; by the loads resistance, while the parallel shows the same amount; but models it as internal resistance!\nBoth examples mean the same thing for an ideal current source and voltage sources, and in practice they are used as simplifications for complex behaving, non-linear supplies of voltage, or current. Looking at a battery as an ideal voltage source is much easier than modeling the internal resistance (at least around appropriate operating ranges!).\nExample An interesting example of a practical current source, is a circuit using transistors and rresistors. I don\u0026rsquo;t understand how this works yet, but will get back to it!\nMeasuring Voltage/Current/Resistance Let\u0026rsquo;s talk about how we measure volts, amps, and ohms in a circuit, and the limitations we have vs. the ideal scenario in measuring them. In theory, a voltmeter should be able to measure voltage without drawing any current; it would be in parallel with $\\infty$ resistance. An ammeter should have 0 resistance, and just measure the current flowing through a circuit at a point, not changing the voltage or resistance at all. An ohmeter should have zero resistance as well, just injecting voltage at a point, and seeing how fast it comes back.\nMultimeters \u0026amp; The Galvanometer Clearly the ideal case is impossible, but how are voltmeters/ammeters/ohmeters designed to make good measurements? Well, the most common way to measure voltage/ohms/amps all in one device is the multimeter.\nAt the core of old multimeters were galvanamoters, which converted current into a reading.\nElectromagnetism The idea behind electromagnetism, is that when particles are moving, according the special relativity, as charges move, their fields are \u0026lsquo;squished\u0026rsquo;. We call the arising force \u0026lsquo;magnetism\u0026rsquo;, and it is essentially another electric force that arrises due to moving charges and their fields.\nWe\u0026rsquo;ll get more into depth in this later, but just understand that moving charges creates an imbalance in the adjacent fields creating an \u0026rsquo;electromagnet\u0026rsquo;, or a force we call magnetism.\nGalvanometers Now, we can apply principle of electormagnetism, and exploit a current running through a wire, to move a needle that will indicate the extent of a reading/measurement. Understand that we can run a current through a coil and create a north/south electromagnet. We can exploit this to read different magnetic intensities (current intensities) in the following way:\nif we create a strong enough current, the magnet opposes the coil and creates enough torque to move the indicator. The galvanometer requires very little current (hence, a weaker coil).\nIf we connect a voltage source (in parallel as a voltmeter) to the galvanometer, and add a very large series resistor, we have the ability to have a large internal resistance, while measuring the relative voltage! (more current through resistor means approximately more volts $V=IR$).\nFor measuring the amps, we connect it to the galvanometer, but also has a parallel resistor with low resistance that skips it; so we only draw a small amount of current.\nFor measuring resistance, there is a small power source that is inside and wired to the galvanometer, when we connect the resistor, based on how resistive it is, current will flow through.\nThen we\u0026rsquo;ll have different \u0026rsquo;terminals for each\u0026rsquo;, and ideally they should be tuned to match (10 for both volts and amps), which is acheivable, because the circuits are seperate.\nUnfortunately, there is error due to the galvanometers inherent resistance.\nLook at the full wiring below:\nCombining Batteries When we combine batteries in parallel, we get an increase in charge (n times more for n batteries), while in series, they add voltage. In series, we can think of the batteries\u0026rsquo; electrochemical force simply adding; both of the batteries now want electrons, which will push each electron harder, adding the force that each of the battery would supply. Each electron would not only allow one of the battery parts to ionize, but now both, hence the additive force per electron.\nWhile in parallel, each electron is only returning to one battery, and therefore the individual batteries output less current (but the same together), but the voltage stays the same. The intuition behind this, is that when the positive terminal is connected to the other positive terminal, the electrons are not actually experiencing more force, since each electron can only supply power to one battery. Furthermore, only 1/n of charges in each battery experience the force with n batteries in parallel, because the voltage is constant due to this.\nOpen and Short Circuits Open and short circuits are common problem in electronics, open circuits are when wires are not connected, and short circuits are inadvertened \u0026lsquo;bypassing\u0026rsquo; of the resistor, where there is excessive current flow.\nWhile baterries have internal resistance (and so do wires), even if the resistance is relatively large, it will likely still supply enough current, and therefore power to damage the components. Fuses will blow when too much current is flowing, stopping short circuits.\nKirkhoffs Laws Sometimes, for a more complex network of devices, we cannot use current laws/reason with ohms law. For example, when LED\u0026rsquo;s in series take up the same amount of voltage (very nonlinear resistance with voltage). In this case, we turn to kirkhoffs laws which are pretty self evident and intuitive:\nVoltage across circuit must be used! (IE if electrons start out with a given voltage, they will use it throughout the circuit at some point, be it a resistor or not), we can see this simply through V=IR, how when resistance changes, and there are multiple resistors, voltage is still all used. This makes sense, because energy is realased (and used) no matter what when batteries are able to transition to a more stable state. Current entering a junction = exiting. Similarly, when current is flowing into a point, or out of a point, it must add up. This is because of the electromotive forces pushing current through are constant, and different paths do not change this force/amount. Current will never \u0026lsquo;stop\u0026rsquo; or disapear once it\u0026rsquo;s driven by a force (it will only part in different direction!) In practice, we can \u0026rsquo;trace\u0026rsquo; over different components in series to find there resistance, and just add it up. Similarly, we can do this for currents as well at a junction.\nLoop rule An interesting/practical property emerges with voltages, that has to do with the simple properties of voltage/circuitry, which basically means that voltages around a loop will equal to zero.\nThis is just a simple property about parallelism that was fitted to this somewhat arbitrary, but useful rule.\nThe reason this is true, is that for a closed loop we basically have electrons that can go in two directions (with same voltage). No matter how complicated the circuit, the electrons will end up using the same amount of energy before they \u0026lsquo;meet up\u0026rsquo; at the next point, or finish this loop.\nHere is a funky example just to illustrate this (note current is flowing a direction in $R_{4}$, which doesn\u0026rsquo;t matter): Matrices \u0026amp; Complex simulation To solve complex, high-dimensional systems of equations, we can employ techniques from linear algebra to compute solutions for these. Most circuit designers will use a computer simulation/calculator for the simplicity, and fundamentally, the algorithm at the heart of these is a matrix-solving algorithm, in which we plug in a bunch of kirkhoffs equations to solve for current and resistance.\nTo breifly give an overview of it, we basically find the determinant of the high-dimensional system of equations, and divide this by the solution plugged in at the nth vector! This is interesting, and we\u0026rsquo;ll come back to solving/understanding this. Just know that this is what is used to solve the systems of equations.\nSuperposition Theorem This theorem is simply describing a property of circuits that is resistricted to linear systems.\nIt says that the current in a \u0026lsquo;branch\u0026rsquo; of a circuit is equal to the current of all the sources (times a coefficient each), with other ones set to zero. This simply means that the amount of current supplied throughout the circuit is linear: if we add another battery with the same voltage, due to V=IR, the current will double. The other sources do not affect the resistances, they scale at the same rate (linear) no matter what.\nThis is useful, because given multiple voltages or current sources, we can just take them one at a time, and is good for practical circuit analysis. ","permalink":"https://chuckles201.github.io/posts/circuitrybasicsnotes/","summary":"\u003ch1 id=\"notes-about-circuitry\"\u003eNotes About Circuitry\u003c/h1\u003e\n\u003ch3 id=\"pre-read\"\u003ePre-read\u003c/h3\u003e\n\u003cp\u003eBefore I begin the notes, the main things I have questions on are:\u003c/p\u003e\n\u003cp\u003eDo batteries have resistance; why can my microcontroller supply a 5/3v voltage, but not very high amps?\u003c/p\u003e\n\u003cp\u003eHow do resistors stop current flow; do they also reduce voltage?\u003c/p\u003e\n\u003cp\u003eHow do I understand intutively and deeply how electricity flows?\u003c/p\u003e\n\u003cp\u003eHow do I understand the current and voltage at every part of a circuit?\u003c/p\u003e\n\u003cp\u003eIntuitively, what does current vs. voltage do?\u003c/p\u003e","title":"CircuitryBasicsNotes"},{"content":"\nContent below was automatically extracted from the readme.md of my autosocial LLM integration project:\nautosocial Automatically posts to all desired socials, finetuned LLM writes appealing/good titles and descriptions for each platform.\n","permalink":"https://chuckles201.github.io/posts/autosocial/","summary":"\u003cp\u003e\u003cbr\u003e\n\u003cstyle\u003e\r\n    .special_title_text {\r\n        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\r\n        color: greenyellow;\r\n    }\r\n\r\n\r\n\u003c/style\u003e\r\n\u003cdiv class=\"special_title_text\"\u003e\r\n\u003cblockquote\u003e\n\u003cp\u003eContent below was automatically extracted from the \u003ca href=\"https://github.com/chuckles201/autosocial\"\u003ereadme.md\u003c/a\u003e of my autosocial LLM integration project:\u003c/p\u003e\n\u003c/blockquote\u003e\r\n\u003c/div\u003e\u003c/p\u003e\n\r\n\n\u003ch1 id=\"autosocial\"\u003eautosocial\u003c/h1\u003e\n\u003cp\u003eAutomatically posts to all desired socials, finetuned LLM writes appealing/good titles and descriptions for each platform.\u003c/p\u003e\n\r\n\u003cimg src=\"/images/posts/autosocial/cycle.png\"\u003e","title":"Autosocial"},{"content":"Here, we\u0026rsquo;ll be parsing our jupyter notebook from a random github link, and reading it out into markdown:\nMarkdown = markdown Code = markdown code block Code output = Images/code block Furthermore, we will fetch a github repo and automatically update it, when the file at the given like has been updated.\nLatstly, we\u0026rsquo;ll be able to stack multiple notebooks into one \u0026lsquo;project\u0026rsquo;.\nRunning scripts on website Since our site is static, we\u0026rsquo;ll need to have a built-in link to displaying our github page, and automatically converting it to markdown somehow inbetween.\nFirst, let\u0026rsquo;s do a test. We\u0026rsquo;ll load in the raw code from an arbitrary github file, and just change the first letter; to make sure we can handle changing, and loading dynamic content.\nIncluding in header Ideally, we would call in our custom script from the header of our file, and input a link:\n--- title: \u0026#34;Your Post Title\u0026#34; date: \u0026#39;2024-12-19T16:39:50-05:00\u0026#39; js_fetch_script: true - url: www.fetch_file_here.com/raw --- and then the script would modify all of the contents of the markdown file.\nTo do this, first we create a custom script in our static/js/custom_script (more on this later), and assumes it does what we want it to do. Now all we need to do is actually call it into a file.\nTo do this, let\u0026rsquo;s look at our single.html file (for our posts):\n{{- if not (.Param \u0026#34;hideMeta\u0026#34;) }} \u0026lt;div class=\u0026#34;post-meta\u0026#34;\u0026gt; {{- partial \u0026#34;post_meta.html\u0026#34; . -}} {{- partial \u0026#34;translation_list.html\u0026#34; . -}} {{- partial \u0026#34;edit_post.html\u0026#34; . -}} {{- partial \u0026#34;post_canonical.html\u0026#34; . -}} \u0026lt;/div\u0026gt; {{- end }} we have a combination of html/js/css and php; the php is checking our parameters (in our header), while the html/js/css runs if the php allows it to.\nSo, let\u0026rsquo;s just check for our custom parameter:\n{{- if (Param \u0026#34;js_fetch_script\u0026#34;) }} \u0026lt;script src=\u0026#34;{{ \u0026#34;js/jupy_load.js\u0026#34; | relURL }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- end }} this seems to work. So, if we just include this at the end of our single.html, we can run arbitrary javascript, and completely modify our file.\nHowever, we\u0026rsquo;ll also want to pass in a parameter (url), which we can do in the following way:\n{{- if (.Param \u0026#34;js_fetch_script\u0026#34;) }} \u0026lt;script src=\u0026#34;{{ \u0026#34;js/jupy_load.js\u0026#34; | relURL }} data-parameter={{ .Param \u0026#34;js_fetch_script\u0026#34; }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- end }} which bascially checks if we fed in a file, and then passes in the parameter, which we can acess from our javascript like this:\nwindow.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, async function () { try { // Read the parameter const scripts = document.getElementsByTagName(\u0026#39;script\u0026#39;); const currentScript = Array.from(scripts).find(script =\u0026gt; script.src.includes(\u0026#39;jupy_load.js\u0026#39;)); const parameter = currentScript.getAttribute(\u0026#39;data-parameter\u0026#39;); console.log(parameter); // Will print: param-value } catch (error) { console.error(\u0026#39;Error\u0026#39;, error); } }); Now we can pass in any parameter (we\u0026rsquo;ll use this for the url later) into our file, and load it! Unfortunately, we actually have to search the script for jupy_load.js, but this is fine and still works (directly acessing the data-parameter didn\u0026rsquo;t work).\nModifying our file Now, let\u0026rsquo;s try to modify our post.\nThe key part is our markdown; we still want to adhere to the overall site/style, so we only want to select the markdown.\n{{- if .Content }} \u0026lt;div class=\u0026#34;post-content\u0026#34;\u0026gt; {{- if not (.Param \u0026#34;disableAnchoredHeadings\u0026#34;) }} {{- partial \u0026#34;anchored_headings.html\u0026#34; .Content -}} {{- else }}{{ .Content }}{{ end }} \u0026lt;/div\u0026gt; {{- end }} Ideally we would want to change the actual markdown, but this is impossible, as hugo does this in it\u0026rsquo;s build process. Therefore to proceed, we would need to\nFetch the content from a remote URL with javascript Create a custom javascript markdown converter that worked client-side Changed the HTML/CSS of site dynamically; effictively matching HUGO\u0026rsquo;s functionality, but with javascript so, we will be procedding with python, since the process can still be streamlined; python will do the fetching, and modify the markdown content, so we can focus on formatting without having to re-write hugo.\nPerhaps I could visit this approach later, however I don\u0026rsquo;t see a method that would work without using a github bot (maybe?), or some server.\nPython Approach With our python code, we have a much more flexible way to streamline our progress; and here is an overview of the functionality:\nRun a bash command that commits the repository, and fetches the remote jupyter-notebooks, updating our markdown files. Let\u0026rsquo;s get into running our python scripts and making sure we can modify our markdown files, fetching the url/info from remote sites, parsing/formatting the jupyter notebooks, and finally running the batch-script which streamlines this process.\nRunning the script First let\u0026rsquo;s import/download these modules:\n# for modifying files \\ # and reading/writing import os import sys # for fetching url import requests we can simply modify a file like this:\nimport sys import requests print(\u0026#34;Hello world.\u0026#34;) path = os.path.abspath(\u0026#39;../blog/content/posts/test_note_b.md\u0026#39;) with open(path,\u0026#39;r\u0026#39;) as file: print(file.read()) Requests Now, let\u0026rsquo;s try to understand how we are going to retreive the data, this part is very complex:\n# requesting url r = requests.get(url=url) print(r.text) and now we have the text (the url was to a raw github link)!\nParsing the JSON (the crux) Now, we need to be able to load an arbitrary url, and render the:\ncode images output into our markdown file that we connect our post to (more on this later).\nFirst, let\u0026rsquo;s analyze the output of the get request:\nview get request\r{ \u0026#34;cells\u0026#34;: [ { \u0026#34;cell_type\u0026#34;: \u0026#34;markdown\u0026#34;, \u0026#34;metadata\u0026#34;: {}, \u0026#34;source\u0026#34;: [ \u0026#34;### Using pre-trained HF vae\u0026#34; ] }, { \u0026#34;cell_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;execution_count\u0026#34;: 13, \u0026#34;metadata\u0026#34;: {}, \u0026#34;outputs\u0026#34;: [], \u0026#34;source\u0026#34;: [ \u0026#34;import huggingface_hub\\n\u0026#34;, \u0026#34;import torch\\n\u0026#34;, \u0026#34;from get_vae import get_vae\\n\u0026#34;, \u0026#34;import sys\\n\u0026#34;, \u0026#34;import os\\n\u0026#34;, \u0026#34;sys.path.append(os.path.abspath(\u0026#39;../data\u0026#39;))\\n\u0026#34;, \u0026#34;import dataloader\\n\u0026#34;, \u0026#34;\\n\u0026#34;, \u0026#34;dataset = dataloader.ImageDataset(None,\u0026#39;raw_images\u0026#39;,\\n\u0026#34;, \u0026#34; label_folder=\u0026#39;../data/label_folder\u0026#39;,\\n\u0026#34;, \u0026#34; im_extension=\u0026#39;jpeg\u0026#39;,\\n\u0026#34;, \u0026#34; use_latents=True,\\n\u0026#34;, \u0026#34; latent_folder=\u0026#39;../data/latent_folder_sdxl\u0026#39;,\\n\u0026#34;, \u0026#34; device=\u0026#39;cpu\u0026#39;)\\n\u0026#34;, \u0026#34;full_vae, encoder = get_vae()\\n\u0026#34; ] }, { \u0026#34;cell_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;execution_count\u0026#34;: 18, \u0026#34;metadata\u0026#34;: {}, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;stderr\u0026#34;, \u0026#34;output_type\u0026#34;: \u0026#34;stream\u0026#34;, \u0026#34;text\u0026#34;: [ \u0026#34;Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-12.002044..16.78721].\\n\u0026#34;, \u0026#34;Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-0.0874937..0.815207].\\n\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;stdout\u0026#34;, \u0026#34;output_type\u0026#34;: \u0026#34;stream\u0026#34;, \u0026#34;text\u0026#34;: [ \u0026#34;torch.Size([1, 4, 32, 32]) torch.Size([3, 256, 256])\\n\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;stderr\u0026#34;, \u0026#34;output_type\u0026#34;: \u0026#34;stream\u0026#34;, \u0026#34;text\u0026#34;: [ \u0026#34;Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-14.887081..17.92659].\\n\u0026#34;, \u0026#34;Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-0.11195281..0.91997355].\\n\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;stdout\u0026#34;, \u0026#34;output_type\u0026#34;: \u0026#34;stream\u0026#34;, \u0026#34;text\u0026#34;: [ \u0026#34;torch.Size([1, 4, 32, 32]) torch.Size([3, 256, 256])\\n\u0026#34; ] }, { \u0026#34;data\u0026#34;: { \u0026#34;image/png\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;text/plain\u0026#34;: [ \u0026#34;\u0026lt;Figure size 640x480 with 4 Axes\u0026gt;\u0026#34; ] }, \u0026#34;metadata\u0026#34;: {}, \u0026#34;output_type\u0026#34;: \u0026#34;display_data\u0026#34; } ], \u0026#34;source\u0026#34;: [ \u0026#34;import matplotlib.pyplot as plt\\n\u0026#34;, \u0026#34;import torchvision\\n\u0026#34;, \u0026#34;fig,ax = plt.subplots(2,2)\\n\u0026#34;, \u0026#34;\\n\u0026#34;, \u0026#34;\\n\u0026#34;, \u0026#34;# outputs x,loss\\n\u0026#34;, \u0026#34;for i in range(2):\\n\u0026#34;, \u0026#34; ind = torch.randint(0,len(dataset),size=(1,))\\n\u0026#34;, \u0026#34; datapt = dataset[ind][0]\\n\u0026#34;, \u0026#34; model_out = full_vae.decode(datapt.to(\u0026#39;cpu\u0026#39;))[0].to(\u0026#39;cpu\u0026#39;)\\n\u0026#34;, \u0026#34; print(datapt.shape,model_out.shape)\\n\u0026#34;, \u0026#34; with torch.no_grad():\\n\u0026#34;, \u0026#34; ax[i][0].imshow(datapt.squeeze(0).permute(1,2,0))\\n\u0026#34;, \u0026#34; ax[i][1].imshow(model_out.permute(1,2,0))\\n\u0026#34;, \u0026#34;\\n\u0026#34; ] } ], \u0026#34;metadata\u0026#34;: { \u0026#34;kernelspec\u0026#34;: { \u0026#34;display_name\u0026#34;: \u0026#34;manimtest\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;python3\u0026#34; }, \u0026#34;language_info\u0026#34;: { \u0026#34;codemirror_mode\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;ipython\u0026#34;, \u0026#34;version\u0026#34;: 3 }, \u0026#34;file_extension\u0026#34;: \u0026#34;.py\u0026#34;, \u0026#34;mimetype\u0026#34;: \u0026#34;text/x-python\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;nbconvert_exporter\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;pygments_lexer\u0026#34;: \u0026#34;ipython3\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;3.12.7\u0026#34; } }, \u0026#34;nbformat\u0026#34;: 4, \u0026#34;nbformat_minor\u0026#34;: 2 } beleive it or not, the image/png was much longer, I just clipped the size.\nNow, let\u0026rsquo;s outline the high-level structure of our data:\n1. \u0026#34;cells\u0026#34;, overall wrapper (list) 2. dictionary for each cell: \u0026#34;cell_type\u0026#34;/\u0026#34;source\u0026#34;: specify cell-type, metadata, outputs 3. Outputs: divided into the different \u0026#39;types\u0026#39; of outputs; list of dictionaries So, here is code to print the high-level information\nurl = \u0026#34;https://raw.githubusercontent.com/chuckles201/DiT-Implementation/refs/heads/main/VAE/download.ipynb\u0026#34; # requesting url r = requests.get(url=url) # getting dict r = json.loads(r.text) for i in range(len(r[\u0026#34;cells\u0026#34;])): ct = r[\u0026#34;cells\u0026#34;][i][\u0026#34;cell_type\u0026#34;] print(f\u0026#34;{ct}_#{i} keys: {r[\u0026#34;cells\u0026#34;][i].keys()}\u0026#34;) Output:\nmarkdown_#0 keys: dict_keys([\u0026#39;cell_type\u0026#39;, \u0026#39;metadata\u0026#39;, \u0026#39;source\u0026#39;]) code_#1 keys: dict_keys([\u0026#39;cell_type\u0026#39;, \u0026#39;execution_count\u0026#39;, \u0026#39;metadata\u0026#39;, \u0026#39;outputs\u0026#39;, \u0026#39;source\u0026#39;]) code_#2 keys: dict_keys([\u0026#39;cell_type\u0026#39;, \u0026#39;execution_count\u0026#39;, \u0026#39;metadata\u0026#39;, \u0026#39;outputs\u0026#39;, \u0026#39;source\u0026#39;]) \u0026lsquo;Connecting\u0026rsquo; post and program Let\u0026rsquo;s start with the easy part; writing our markdown to our file.\nWe\u0026rsquo;ll create a dictionary of all the post-files and all of the urls, and for each post-file, we\u0026rsquo;ll create a shortcode that does nothing, but specifies where we want our python file to start/stop the jupyter notebook.\nHere\u0026rsquo;s the program:\ncode\rimport os import sys import requests import json import regex as re ### Helper functions ### # function to write at specific # location in file def write_mdfile(start_token,stop_token,file,to_write): with open(file,\u0026#39;r\u0026#39;) as file_read: text = file_read.read() # split any new-line # parethesis preserve info tokens = re.split(r\u0026#39;(\\n+)\u0026#39;,text) # replace all-inbetween! try: start = tokens.index(start_token) stop = tokens.index(stop_token) except: raise Exception(\u0026#34;Missing note-b token\u0026#34;) tokens = [(tokens[i]) for i in range(len(tokens)) if i\u0026gt;stop or i\u0026lt;start] # append to_write (note-b) tokens.insert(start,to_write) # inserting before/after the tokens... tokens.insert(start+1,stop_token) tokens.insert(start,start_token) # writing back to file with open(file,\u0026#39;w\u0026#39;) as file_write: file_write.write(\u0026#34;\u0026#34;.join(tokens)) This allows us to write to any markdown file, as long as we have our special start/top shortcodes, which we can easily include.\nNow, let\u0026rsquo;s iterate through the dictionary of \u0026lsquo;connected\u0026rsquo; posts and urls, and write the url for each post, given our start/stop tokens.\ncode\rimport os import sys import requests import json import regex as re ### Helper functions ### # function to write at specific # location in file def write_mdfile(start_token,stop_token,file,to_write): with open(file,\u0026#39;r\u0026#39;) as file_read: text = file_read.read() # split any new-line # parethesis preserve info tokens = re.split(r\u0026#39;(\\n+)\u0026#39;,text) # replace all-inbetween! try: start = tokens.index(start_token) stop = tokens.index(stop_token) except: raise Exception(\u0026#34;Missing note-b token\u0026#34;) tokens = [(tokens[i]) for i in range(len(tokens)) if i\u0026gt;stop or i\u0026lt;start] # append to_write (note-b) tokens.insert(start,to_write) # inserting before/after the tokens... tokens.insert(start+1,stop_token) tokens.insert(start,start_token) # writing back to file with open(file,\u0026#39;w\u0026#39;) as file_write: file_write.write(\u0026#34;\u0026#34;.join(tokens)) def json_to_md(data): return data ### MAIN PROGRAM ### def main(): # retreive url with open(\u0026#39;post_to_url.json\u0026#39;,\u0026#39;r\u0026#39;) as f: post_url_dict = json.load(f) for post in list(post_url_dict.keys()): url = post_url_dict[post] # requesting url r = requests.get(url) # getting dict # adding \\n for correctness r = str(r.text)[:1000] r = \u0026#34;\u0026#34;.join([\u0026#34;\\n\u0026#34;,\u0026#34;```json\u0026#34;,r,\u0026#34;```\u0026#34;,\u0026#34;\\n\u0026#34;]) # parsing text... to_write = json_to_md(r) # quick # creating file path = os.path.abspath(f\u0026#39;../blog/content/posts/{post}.md\u0026#39;) write_mdfile(start_token=\u0026#34;{{ jupyter_token_start \u0026gt;}}\u0026#34;, stop_token=\u0026#34;{{ jupyter_token_end \u0026gt;}}\u0026#34;, file=path, to_write=to_write) print(\u0026#34;**********\u0026#34;) print(f\u0026#34;Wrote file: {path}\\nFrom URL: {url} ({len(r)} chars)\u0026#34;) print(\u0026#34;**********\u0026#34;) main() One last note, is that we may want to have our delimiter have \u0026lsquo;%\u0026rsquo; tags instead of \u0026lsquo;\u0026lt;\u0026gt;\u0026rsquo; so we can inject markdown.\nDealing with markdown cell The markdown cell is the easiest, we simply will load in the markdown as-is (and add a new-line). I am saving all of the \u0026lsquo;stream\u0026rsquo; of cell-data into one-list.\nBasically, all we\u0026rsquo;ll need to do for the markdown is to take the \u0026rsquo;list\u0026rsquo; of strings (each new line seperates a new element) and join them into one-long steam, and add a \\n to have a new-line.\nhere is the code so far:\ncode\rdef json_to_md(data_dict): # list of cells cells = data_dict[\u0026#34;cells\u0026#34;] # other info (like language) metadata = data_dict[\u0026#34;metadata\u0026#34;] # full string/file data_stream = [] # for each cell which is a dictionary # with source,outputs, for i, cell in enumerate(cells): # markdown cell if cell[\u0026#34;cell_type\u0026#34;] == \u0026#34;markdown\u0026#34;: # list of elements lines = cell[\u0026#34;source\u0026#34;] lines.append(\u0026#34;\\n\u0026#34;) # concat lines = \u0026#34;\u0026#34;.join(lines) data_stream.append(lines) elif cell[\u0026#34;cell_type\u0026#34;] == \u0026#34;code\u0026#34;: pass this works.\nCode-Cell Now we need to do the same thing, accept add our three ` and specify the language. Luckily, this part will be very easy, and very similar to our markdown (we\u0026rsquo;re not working on outputs yet.)\ncode\relif cell[\u0026#34;cell_type\u0026#34;] == \u0026#34;code\u0026#34;: ####### SOURCE ####### # list of elements lines = cell[\u0026#34;source\u0026#34;] # for code-formatting lines.append(\u0026#34;```\\n\u0026#34;) lines.insert(0,f\u0026#34;```{language}\\n\u0026#34;) # concat lines = \u0026#34;\u0026#34;.join(lines) data_stream.append(lines) ######################### Code-Cell: Outputs Now ket\u0026rsquo;s deal with the actual outputs of our code-cell, we\u0026rsquo;ll be loading it the same way as jupyter, which is: Text, and then Image.\nOutputs are lists of dictionaries, where each dictionary is a unique \u0026rsquo;type\u0026rsquo; of output, for example we can have \u0026rsquo;error\u0026rsquo; messages from the terminal, images, and then the actual code-output.\nText To deal with out text-outputs, we\u0026rsquo;ll iterate through the list of dictionaries, and check what-type the output is. We\u0026rsquo;ll just check if the text is \u0026lsquo;stream\u0026rsquo;, and then output based on this.Here are the types of streams:\nstderr: warnings/messages from console stdout output-code we\u0026rsquo;ll highlight the stderr specially, as it is a warning (eventually)\u0026hellip;\nWe\u0026rsquo;ll also create a special-output-box for our output so that it formats nicely on our site.\nSo far, all we\u0026rsquo;re doing is understanding the stucture of the dictionary that we get from our raw content, and then we simply load the outputs in-order, and append them to a list (which is then concatenated into a string). Once we do this, and we can add custom-formatting in the form of short-codes, but I\u0026rsquo;m making it simplistic for now.\nFor our code-cells since we have to deal with both \u0026lsquo;stream\u0026rsquo; and \u0026lsquo;data\u0026rsquo; ouputs, we iterate through all of the dictionaries inside of our cell-dictionary and siplay them in the same order.\nSince this got a little messy for me, here is the structure of the outputs:\n|Outputs (list) | | Dictionary 1 | | Type | | Output | | Dictionary 2 | | Type | | Output | | Dictionary~(Data) | | Data: | | Text/plain | | Image So the outputs are a list of dictionaries, and each dictionary contains both the information, and data about the information. And it is displayed in order, so we iterate through the list of dictionaries, and display each in order.\nHowever, when we have \u0026lsquo;data\u0026rsquo; which is plain text/images, we have to acess another dictionary. I\u0026rsquo;m not sure why they structured it this way, but it\u0026rsquo;s what we\u0026rsquo;re working with.\nImages Now, we\u0026rsquo;ll have to convert images in our cell-outputs into, well, images.\nFirst, let\u0026rsquo;s deal with the simple case where images are stored in BASE-64 format, which is a format used for JSON, where bits are encoded with printable characters.\nHere is a high-level view of the implementation of the function:\nWe take the image-string/file-extentsion We create a new path for the image, which will be loaded from markdown. We convert the base64 to binary see here We save the image, and then insert a shortcode to load it: Image-Converter: code\rdef image_base64_save(raw_data,path_to_save): # binary-writing-pdf def bytes_to_img(raw_str,save_path): # decode to bytes raw_bytes = base64.b64decode(raw_str) # temporary file image = Image.open(BytesIO(raw_bytes)) # show image! image.save(f\u0026#34;{save_path}\u0026#34;) bytes_to_img(raw_data,path_to_save) Usage:\ncode\r### IMG-CONVERT ### img_in = False image_types = [\u0026#34;png\u0026#34;,\u0026#34;jpg\u0026#34;,\u0026#34;jpeg\u0026#34;,\u0026#34;img\u0026#34;,\u0026#34;webp\u0026#34;,\u0026#34;gif\u0026#34;,\u0026#34;pdf\u0026#34;,\u0026#34;svg\u0026#34;,\u0026#34;eps\u0026#34;] img_ext = \u0026#34;\u0026#34; for type in image_types: if f\u0026#34;image/{type}\u0026#34; in list(output[\u0026#34;data\u0026#34;].keys()): img_in = True img_ext = type if img_in: start = \u0026#34;\\n\u0026#34; if not need_end: start = \u0026#39;\\n{\u0026lt; code_output summary=\u0026#34;Output:\u0026#34; open=\u0026#34;true\u0026#34; \u0026gt;}\\n\u0026#39; need_end = True end = str(\u0026#34;{\u0026lt;/ code_output br \u0026gt;}\\n\u0026#34;) need_end = False # got end # saving image at path! raw_data = output[\u0026#34;data\u0026#34;][f\u0026#34;image/{img_ext}\u0026#34;] # making sure path is correct img_name = f\u0026#34;cell_{i}_img.png\u0026#34; path_img_new = \u0026#34;\u0026#34;.join([path_img, f\u0026#34;/{img_name}\u0026#34;]) helpers.image_base64_save(raw_data=raw_data, path_to_save=path_img_new) # not using /blog/static in md (implied) # saving with image name path_img_abs = path_img_new.split(\u0026#34;/blog/static\u0026#34;)[1] print(f\u0026#34;PATH SAVED: {path_img_new}\u0026#34;) print(f\u0026#34;PATH MD: {path_img_abs}\u0026#34;) img_data = f\u0026#39;{\u0026lt; image_output src=\u0026#34;{path_img_abs}\u0026#34; }\u0026#39; lines = [start] lines.append(img_data) lines.append(end) data_stream.append(\u0026#34;\u0026#34;.join(lines)) ######################3 Note: I messed around with the code a little so shortcodes did not accidentally render on this page.\nThe main issue was dealing with the file extensions (saving vs. loading, because hugo assumes static directory), but that was easily fixed with some trial/error.\nIn-Line MD images Now, we\u0026rsquo;ll deal with inline markdown images.\nThe two things we\u0026rsquo;ll need to deal with is:\nGetting the image based on the raw github link, and the relative directory accessed. (search through whole github site) Download image and save in proper directory; display Ok, so first let\u0026rsquo;s try to understand how the file-structure is acessed through github with the urls:\nurl-base: github.com/username/reponame (if in folder): /tree/main/foldername (if in file): /blob/main/pathtofile.ext Not to bad, just slight differences between acessing a file, and acessing a link.\nNow, given a raw url like this:\nhttps://raw.githubusercontent.com/chuckles201/DiT-Implementation/refs/heads/main/DiT/attention.py\nwe can translate it by doing the following:\n1. Alter beginning to be github.com 2. Alter /refs/head to be /blob https://github.com/chuckles201/DiT-Implementation/blob/main/DiT/attention.py\nand we have our not-raw file!\nThen if we wanted to go one-directory down into \u0026lsquo;images\u0026rsquo;, we could simply add to the folder path as we would usually:\nhttps://github.com/chuckles201/DiT-Implementation/blob/main/DiT/images/image_name.jpg\nchanging link\rdef download_image_md(path_md,original_path): # insert blob new_path = original_path.replace(\u0026#39;/refs/heads/\u0026#39;,\u0026#39;/blob/\u0026#39;) # insert github.com new_path = new_path.replace(\u0026#39;raw.githubusercontent.com\u0026#39;,\u0026#39;github.com\u0026#39;) # split to change url,path = new_path.split(\u0026#39;/blob/\u0026#39;) path = path.split(\u0026#39;/\u0026#39;) # change rel-path to # be md path! path[-1] = path_md path = \u0026#34;/\u0026#34;.join(path) full_url = \u0026#34;/blob/\u0026#34;.join([url,path]) So basically, we just are replacing the path with the new path we detect in markdown. However, this runs into a problem if we use \u0026lsquo;../\u0026rsquo; to acess images, however I don\u0026rsquo;t really do this, and I think it\u0026rsquo;s rare, so it shouldn\u0026rsquo;t be a problem.\nDownloading Now, given a link we download by:\ndownloading\r# download and return right md-insertion def download_image_md(path_md_string,original_path,post_name): # insert blob new_path = original_path.replace(\u0026#39;/refs/heads/\u0026#39;,\u0026#39;/blob/\u0026#39;) # insert github.com new_path = new_path.replace(\u0026#39;raw.githubusercontent.com\u0026#39;,\u0026#39;github.com\u0026#39;) # split to change url,path = new_path.split(\u0026#39;/blob/\u0026#39;) path = path.split(\u0026#39;/\u0026#39;) # formatting raw-md-string path_md = path_md_string.split(\u0026#39;(\u0026#39;)[1][:-1] if path_md[0] == \u0026#34;/\u0026#34;: path_md = path_md[1:] path[-1] = path_md # adding md path to new path path = \u0026#34;/\u0026#34;.join(path) full_url = \u0026#34;/blob/\u0026#34;.join([url,path]) # downloading to file rel_directory = f\u0026#34;../blog/static/images/{post_name}/{path_md}\u0026#34;.split(\u0026#34;/\u0026#34;) rel_directory = \u0026#34;/\u0026#34;.join(rel_directory[:-1]) os.makedirs(rel_directory,exist_ok=True) output_filename = f\u0026#34;../blog/static/images/{post_name}/{path_md}\u0026#34; download_url = \u0026#34;\u0026#34;.join([full_url,\u0026#34;?raw=true\u0026#34;]) # Send an HTTP GET request to the URL response = requests.get(download_url) # Check if the request was successful if response.status_code == 200: # Write the content to a file with open(output_filename, \u0026#34;wb\u0026#34;) as file: file.write(response.content) print(f\u0026#34;Image downloaded and saved as {output_filename}\u0026#34;) else: print(f\u0026#34;Failed to download image. HTTP status code: {response.status_code}\u0026#34;) # return corrected md-string md_path = output_filename.split(\u0026#34;/blog/static/\u0026#34;)[1] md_string = f\u0026#39;{{ \u0026lt;img src=\u0026#34;%7bmd_path%7d\u0026#34;\u0026gt;}}\u0026#39; return md_string basically, we do some simple formatting of the link to navigate the structure, and then put this together with the md-string to download, and then output the correct directory.\nNow, let\u0026rsquo;s do this for a given chunk of markdown-text. The main thing we\u0026rsquo;ll need to do is seperate image-lines from others; luckily this is easy enough with markdown. However, I couldn\u0026rsquo;t find a quick solution to replace all of a given regex pattern occurence at their respective indices, so I hacked together a solution:\nfinal function\rdef find_replace_images(text,url,post_name): # download and return right md-insertion def download_image_md(path_md_string,original_path=url,post_name=post_name): # insert blob new_path = original_path.replace(\u0026#39;/refs/heads/\u0026#39;,\u0026#39;/blob/\u0026#39;) # insert github.com new_path = new_path.replace(\u0026#39;raw.githubusercontent.com\u0026#39;,\u0026#39;github.com\u0026#39;) # split to change url,path = new_path.split(\u0026#39;/blob/\u0026#39;) path = path.split(\u0026#39;/\u0026#39;) # formatting raw-md-string path_md = path_md_string.split(\u0026#39;(\u0026#39;)[1][:-1] if path_md[0] == \u0026#34;/\u0026#34;: path_md = path_md[1:] path[-1] = path_md # adding md path to new path path = \u0026#34;/\u0026#34;.join(path) full_url = \u0026#34;/blob/\u0026#34;.join([url,path]) # downloading to file rel_directory = f\u0026#34;../blog/static/images/{post_name}/{path_md}\u0026#34;.split(\u0026#34;/\u0026#34;) rel_directory = \u0026#34;/\u0026#34;.join(rel_directory[:-1]) os.makedirs(rel_directory,exist_ok=True) output_filename = f\u0026#34;../blog/static/images/{post_name}/{path_md}\u0026#34; download_url = \u0026#34;\u0026#34;.join([full_url,\u0026#34;?raw=true\u0026#34;]) # Send an HTTP GET request to the URL print(download_url) response = requests.get(download_url) # Check if the request was successful if response.status_code == 200: # Write the content to a file with open(output_filename, \u0026#34;wb\u0026#34;) as file: file.write(response.content) print(f\u0026#34;Image downloaded and saved as {output_filename}\u0026#34;) else: print(f\u0026#34;Failed to download image. HTTP status code: {response.status_code}\u0026#34;) # return corrected md-string md_path = output_filename.split(\u0026#34;/blog/static/\u0026#34;)[1] md_string = f\u0026#39;{{ \u0026lt;img src=\u0026#34;%7bmd_path%7d\u0026#34;\u0026gt;}}\u0026#39; return md_string # find all images, w/ desired # md pattern # img_indices: # pattern to capture them, findall pattern = \u0026#34;!\\[([^\\]]*)\\]\\(([^\\)]*)\\)\u0026#34; matches = re.finditer(pattern,text) text_new = text for match in matches: str_md = match.group() new = download_image_md(str_md,url,post_name) text_new = text_new.replace(str_md,new) return text_new Now, let\u0026rsquo;s implement this for our markdown files, and our notebooks with markdown, we simply pass the url/arguments, the text, and the rest should be converted for us:\nimplemented\rOther fixes Another little problem I ran into was dealing with \u0026lsquo;\u0026lt;\u0026gt;\u0026rsquo; type-strings (they render as html) in our outputs, to deal with this, I had to learn how to replace all \u0026lsquo;\u0026lt;\u0026gt;\u0026rsquo; with their correspinding strings in regex, unless we actually wanted the short code. Here is that:\ncode\rimport regex as re def format_out(text): # Replace `\u0026lt;` with `\u0026amp;lt;` only if not preceeded by `{{\u0026#39; pattern = r\u0026#39;(?\u0026lt;![{{])\u0026lt;\u0026#39; replacement = \u0026#34;\u0026amp;lt;\u0026#34; text = re.sub(pattern,replacement,text) # preceeds two characters pattern = r\u0026#39;\u0026gt;(?![}}])\u0026#39; replacement = \u0026#34;\u0026amp;gt;\u0026#34; text = re.sub(pattern,replacement,text) return text Beautifying Now that we can load in markdown, code, and code-outputs, I tried to make the outputs actually look-nice.\nI basically just tried new CSS, and looked at what looked visually appealing. The code-display I settled on is currently displaying on this page.\nNote: Don\u0026rsquo;t insert new scripts into page, it will affect everything! Create a new class and modify its CSS to play-around.\nI also made the choice to keep seperate collapsable boxes for each code-block, but if a code block directly followed another without an output, i left out an indent, while if an output followed, I kept an indent. This is because multiple succesive blocks without outputs are likely continualy building on eachother.\nLeaving side-notes I also wanted to add a way, so that in a given cell, I can leave a side-note (for editing in the website now), like a source being cited, or an explanation.\nI don\u0026rsquo;t know if this is viable, because it makes the viewing experience more strenous, and will require some finicking with the CSS for now.\nAdding other files Ok, now we can easily generalize our program to check for different start/end tokens, and based on the token, load the raw-text differently. We can easily just have \u0026rsquo;token_start_python(or-any-other-language)\u0026rsquo; and just load the raw-file; this is in case for some reason we wanted a post dedicated to a single file (or just any page.)\nExample of .ipynb (jupyter notebooks): test_ipynb Example of python (or any other language): raw_test Streamlining/\u0026lsquo;1-execution\u0026rsquo; Now, finally we\u0026rsquo;ll write a bash program that:\nRun\u0026rsquo;s the update-script, builds the website, and pushes them to github automatically Then, automatically goes into our JupyterToMd repository, and saves any updates we may have made here bash script\r#!/bin/bash # set -e # exiting on error echo \u0026#34;Fetching Urls to update site...\u0026#34; cd JupyterToMd # make sure conda directory # is working source ~/miniconda3/etc/profile.d/conda.sh conda activate jupytertomd python siteconverter.py conda deactivate cd .. # password/user username=$(cat user.txt) password=$(cat pass.txt) echo $username echo $password # Build the project cd blog hugo --ignoreCache # remove old/unused categories hugo # Go to public folder for site cd public # get user/pass echo \u0026#34;\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;Pushing changes to Github\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;\u0026#34; # for auto-commit reposite=\u0026#34;https://github.com/chuckles201/chuckles201.github.io.git\u0026#34; repoconverter=\u0026#34;https://github.com/chuckles201/JupyterToMdWebsite.git\u0026#34; # Add changes w/ force-push! # expect allow dynamic response git init # Clean up any existing remote git remote remove origin 2\u0026gt;/dev/null || true # Add the remote git remote add origin $reposite # git remote add origin $reposite branch=$(git symbolic-ref --short HEAD) git checkout $branch echo \u0026#34;**********STATUS*************\u0026#34; git status echo \u0026#34;**********STATUS*************\u0026#34; git add . git status echo \u0026#34;**********STATUS*************\u0026#34; msg=\u0026#34;auto-deploy site $(date)\u0026#34; git commit -m \u0026#34;$msg\u0026#34; echo \u0026#34;\u0026#34; pwd git branch echo \u0026#34;\u0026#34; # sends username/new-line # and password echo \u0026#34;branch: $branch\u0026#34; expect \u0026lt;\u0026lt;EOF spawn git push -f origin $branch expect \u0026#34;Username for \u0026#39;https://github.com\u0026#39;:\u0026#34; send \u0026#34;$username\\r\u0026#34; expect \u0026#34;Password for \u0026#39;https://$username@github.com\u0026#39;:\u0026#34; send \u0026#34;$password\\r\u0026#34; expect eof EOF # seeing if pushed if [ $? -eq 0 ]; then echo \u0026#34;PUSH SUCCESFUL\u0026#34; else echo \u0026#34;PUSH FAILED\u0026#34; exit 1 fi # remove remote origin git remote remove origin # next repo cd .. cd .. cd JupyterToMd ########################## # next repo update. git init # Clean up any existing remote git remote remove origin 2\u0026gt;/dev/null || true # Add the remote git remote add origin $repoconverter # git remote add origin $repoconverter branch2=$(git symbolic-ref --short HEAD) git checkout $branch2 echo \u0026#34;**********STATUS*************\u0026#34; git status echo \u0026#34;**********STATUS*************\u0026#34; git add . git status echo \u0026#34;**********STATUS*************\u0026#34; msg=\u0026#34;auto-deploy converter $(date)\u0026#34; git commit -m \u0026#34;$msg\u0026#34; # same script expect \u0026lt;\u0026lt;EOF spawn git push -f origin $branch2 expect \u0026#34;Username for \u0026#39;https://github.com\u0026#39;:\u0026#34; send \u0026#34;$username\\r\u0026#34; expect \u0026#34;Password for \u0026#39;https://$username@github.com\u0026#39;:\u0026#34; send \u0026#34;$password\\r\u0026#34; expect eof EOF # seeing if pushed if [ $? -eq 0 ]; then echo \u0026#34;PUSH SUCCESFUL\u0026#34; else echo \u0026#34;PUSH FAILED\u0026#34; fi # remove remote origin git remote remove origin echo \u0026#34;Pushed Succesfully\u0026#34; # run chmod +x deploy.sh to make executable # then go: ./deploy.sh At a high-level, this code basically runs the python script, builds the site, initializes the github repo at the given locations, adds the remote origins, and pushes them.\nA part I had to implement was \u0026lsquo;responding\u0026rsquo; to the user/password prompt github gives; so I had to install expect for my linux machine, but this was simple to work with, and the commands are pretty straight forward (thanks gpt).\nFurthermore, there were also some random problems with commiting to github, and I assume this is just because I am a noob at command-line interfact for github, here were my fixes:\nRemoving remote-origin if there was one, and re-initing it Checking git-status of each-push (and not exiting for an empty push) Making sure we\u0026rsquo;re on the right branch (the \u0026lsquo;HEAD\u0026rsquo; branch) with branch=$(git symbolic-ref --short HEAD) Sharing Now, I will try to actually make this useful for other people, who like me may want to work in a jupyter-notebook-like environement, but also share their work on something accessible like a website.\nHere are the things that are necessary for sharing:\nCreation of start/end tokens, and other special shortcodes Having right file-paths. Here is the readme.md i created with full instructions.\nReview/Learning Experience Overall, this was a fun and easy project that basically just involved:\nParsing some JSON/understanding the strcuture Creating some HTML/CSS and integrating it into the site I have not added the functionality to render in-line markdown images yet, which is something I\u0026rsquo;ll work on later.\nAlso, I have never created/finsihed an end-to-end project like this that was pure programming; and its rewarding to see everything finally workout. However, the project was pretty disorganized, and this is something important I\u0026rsquo;ve learned:\nFrom the beginning, try to define a strcture for your project! Design it in the simplest way possible, so that anyone without prior knowledge could come in and understand it. Because, undoubtedly my code became messy. Now, what I\u0026rsquo;m going to work on next for my site is:\n1. Auto-posting to different socials (link pages in json, and deploy with one-command), with LLM integration? ","permalink":"https://chuckles201.github.io/posts/jupyter_converter/","summary":"\u003cp\u003eHere, we\u0026rsquo;ll be parsing our jupyter notebook from a random github link, and reading it out into markdown:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eMarkdown = markdown\u003c/li\u003e\n\u003cli\u003eCode = markdown code block\u003c/li\u003e\n\u003cli\u003eCode output = Images/code block\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFurthermore, we will fetch a github repo and automatically update it, when the file at the given like has been updated.\u003c/p\u003e\n\u003cp\u003eLatstly, we\u0026rsquo;ll be able to stack multiple notebooks into one \u0026lsquo;project\u0026rsquo;.\u003c/p\u003e\n\u003ch2 id=\"running-scripts-on-website\"\u003eRunning scripts on website\u003c/h2\u003e\n\u003cp\u003eSince our site is static, we\u0026rsquo;ll need to have a built-in link to displaying our github page, and automatically converting it to markdown somehow inbetween.\u003c/p\u003e","title":"Jupyter-To-Site"},{"content":" 1. Sharing Knowledge With this blog I aim to share my projects, which are manifestations of my learning through my own thinking, and learning from the knowledge created by others.\nI will attempt to make this blog high-quality, educational, and dense in knowledge/learning; and importantly, everything I will share will (hopefully) be interesting/worth sharing.\n2. Community I am writing here, because I beleive that sharing with the community is a great way to motivate myself, and to truly push myself to further understand. I hope that you comment on my post, share feedback, and take-part!\nI\u0026rsquo;d imagine something like this to describe why sharing with the community can be beneficial:\nWhile this is very un-nuanced, I still think it is good, and somewhat describes why knowledge should be shared!\n3. Depth of knowledge The most important part of this blog is learning and deeply understanding. With every project/post, I will be asking the question: how can I dig deeper? This inevitably involves building-things out and challenging the mind with \u0026lsquo;mental (work)thinkouts\u0026rsquo;, and thinking through/spending time with subjects, trying to understand 🧠.\n","permalink":"https://chuckles201.github.io/manifesto/","summary":"manifesto","title":"Blog Manifesto"}]