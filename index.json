[{"content":"Here, we\u0026rsquo;ll be parsing our jupyter notebook from a random github link, and reading it out into markdown:\nMarkdown = markdown Code = markdown code block Code output = Images/code block Furthermore, we will fetch a github repo and automatically update it, when the file at the given like has been updated.\nLatstly, we\u0026rsquo;ll be able to stack multiple notebooks into one \u0026lsquo;project\u0026rsquo;.\nRunning scripts on website Since our site is static, we\u0026rsquo;ll need to have a built-in link to displaying our github page, and automatically converting it to markdown somehow inbetween.\nFirst, let\u0026rsquo;s do a test. We\u0026rsquo;ll load in the raw code from an arbitrary github file, and just change the first letter; to make sure we can handle changing, and loading dynamic content.\nIncluding in header Ideally, we would call in our custom script from the header of our file, and input a link:\n--- title: \u0026#34;Your Post Title\u0026#34; date: \u0026#39;2024-12-19T16:39:50-05:00\u0026#39; js_fetch_script: true - url: www.fetch_file_here.com/raw --- and then the script would modify all of the contents of the markdown file.\nTo do this, first we create a custom script in our static/js/custom_script (more on this later), and assumes it does what we want it to do. Now all we need to do is actually call it into a file.\nTo do this, let\u0026rsquo;s look at our single.html file (for our posts):\n{{- if not (.Param \u0026#34;hideMeta\u0026#34;) }} \u0026lt;div class=\u0026#34;post-meta\u0026#34;\u0026gt; {{- partial \u0026#34;post_meta.html\u0026#34; . -}} {{- partial \u0026#34;translation_list.html\u0026#34; . -}} {{- partial \u0026#34;edit_post.html\u0026#34; . -}} {{- partial \u0026#34;post_canonical.html\u0026#34; . -}} \u0026lt;/div\u0026gt; {{- end }} we have a combination of html/js/css and php; the php is checking our parameters (in our header), while the html/js/css runs if the php allows it to.\nSo, let\u0026rsquo;s just check for our custom parameter:\n{{- if (Param \u0026#34;js_fetch_script\u0026#34;) }} \u0026lt;script src=\u0026#34;{{ \u0026#34;js/jupy_load.js\u0026#34; | relURL }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- end }} this seems to work. So, if we just include this at the end of our single.html, we can run arbitrary javascript, and completely modify our file.\nHowever, we\u0026rsquo;ll also want to pass in a parameter (url), which we can do in the following way:\n{{- if (.Param \u0026#34;js_fetch_script\u0026#34;) }} \u0026lt;script src=\u0026#34;{{ \u0026#34;js/jupy_load.js\u0026#34; | relURL }} data-parameter={{ .Param \u0026#34;js_fetch_script\u0026#34; }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- end }} which bascially checks if we fed in a file, and then passes in the parameter, which we can acess from our javascript like this:\nwindow.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, async function () { try { // Read the parameter const scripts = document.getElementsByTagName(\u0026#39;script\u0026#39;); const currentScript = Array.from(scripts).find(script =\u0026gt; script.src.includes(\u0026#39;jupy_load.js\u0026#39;)); const parameter = currentScript.getAttribute(\u0026#39;data-parameter\u0026#39;); console.log(parameter); // Will print: param-value } catch (error) { console.error(\u0026#39;Error\u0026#39;, error); } }); Now we can pass in any parameter (we\u0026rsquo;ll use this for the url later) into our file, and load it! Unfortunately, we actually have to search the script for jupy_load.js, but this is fine and still works (directly acessing the data-parameter didn\u0026rsquo;t work).\nModifying our file Now, let\u0026rsquo;s try to modify our post.\nThe key part is our markdown; we still want to adhere to the overall site/style, so we only want to select the markdown.\n{{- if .Content }} \u0026lt;div class=\u0026#34;post-content\u0026#34;\u0026gt; {{- if not (.Param \u0026#34;disableAnchoredHeadings\u0026#34;) }} {{- partial \u0026#34;anchored_headings.html\u0026#34; .Content -}} {{- else }}{{ .Content }}{{ end }} \u0026lt;/div\u0026gt; {{- end }} Ideally we would want to change the actual markdown, but this is impossible, as hugo does this in it\u0026rsquo;s build process. Therefore to proceed, we would need to\nFetch the content from a remote URL with javascript Create a custom javascript markdown converter that worked client-side Changed the HTML/CSS of site dynamically; effictively matching HUGO\u0026rsquo;s functionality, but with javascript so, we will be procedding with python, since the process can still be streamlined; python will do the fetching, and modify the markdown content, so we can focus on formatting without having to re-write hugo.\nPerhaps I could visit this approach later, however I don\u0026rsquo;t see a method that would work without using a github bot (maybe?), or some server.\nPython Approach With our python code, we have a much more flexible way to streamline our progress; and here is an overview of the functionality:\nRun a bash command that commits the repository, and fetches the remote jupyter-notebooks, updating our markdown files. Let\u0026rsquo;s get into running our python scripts and making sure we can modify our markdown files, fetching the url/info from remote sites, parsing/formatting the jupyter notebooks, and finally running the batch-script which streamlines this process.\nRunning the script First let\u0026rsquo;s import/download these modules:\n# for modifying files \\ # and reading/writing import os import sys # for fetching url import requests we can simply modify a file like this:\nimport sys import requests print(\u0026#34;Hello world.\u0026#34;) path = os.path.abspath(\u0026#39;../blog/content/posts/test_note_b.md\u0026#39;) with open(path,\u0026#39;r\u0026#39;) as file: print(file.read()) Requests Now, let\u0026rsquo;s try to understand how we are going to retreive the data, this part is very complex:\n# requesting url r = requests.get(url=url) print(r.text) and now we have the text (the url was to a raw github link)!\nParsing the JSON (the crux) Now, we need to be able to load an arbitrary url, and render the:\ncode images output into our markdown file that we connect our post to (more on this later).\nFirst, let\u0026rsquo;s analyze the output of the get request:\nview get request\r{ \u0026#34;cells\u0026#34;: [ { \u0026#34;cell_type\u0026#34;: \u0026#34;markdown\u0026#34;, \u0026#34;metadata\u0026#34;: {}, \u0026#34;source\u0026#34;: [ \u0026#34;### Using pre-trained HF vae\u0026#34; ] }, { \u0026#34;cell_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;execution_count\u0026#34;: 13, \u0026#34;metadata\u0026#34;: {}, \u0026#34;outputs\u0026#34;: [], \u0026#34;source\u0026#34;: [ \u0026#34;import huggingface_hub\\n\u0026#34;, \u0026#34;import torch\\n\u0026#34;, \u0026#34;from get_vae import get_vae\\n\u0026#34;, \u0026#34;import sys\\n\u0026#34;, \u0026#34;import os\\n\u0026#34;, \u0026#34;sys.path.append(os.path.abspath(\u0026#39;../data\u0026#39;))\\n\u0026#34;, \u0026#34;import dataloader\\n\u0026#34;, \u0026#34;\\n\u0026#34;, \u0026#34;dataset = dataloader.ImageDataset(None,\u0026#39;raw_images\u0026#39;,\\n\u0026#34;, \u0026#34; label_folder=\u0026#39;../data/label_folder\u0026#39;,\\n\u0026#34;, \u0026#34; im_extension=\u0026#39;jpeg\u0026#39;,\\n\u0026#34;, \u0026#34; use_latents=True,\\n\u0026#34;, \u0026#34; latent_folder=\u0026#39;../data/latent_folder_sdxl\u0026#39;,\\n\u0026#34;, \u0026#34; device=\u0026#39;cpu\u0026#39;)\\n\u0026#34;, \u0026#34;full_vae, encoder = get_vae()\\n\u0026#34; ] }, { \u0026#34;cell_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;execution_count\u0026#34;: 18, \u0026#34;metadata\u0026#34;: {}, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;stderr\u0026#34;, \u0026#34;output_type\u0026#34;: \u0026#34;stream\u0026#34;, \u0026#34;text\u0026#34;: [ \u0026#34;Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-12.002044..16.78721].\\n\u0026#34;, \u0026#34;Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-0.0874937..0.815207].\\n\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;stdout\u0026#34;, \u0026#34;output_type\u0026#34;: \u0026#34;stream\u0026#34;, \u0026#34;text\u0026#34;: [ \u0026#34;torch.Size([1, 4, 32, 32]) torch.Size([3, 256, 256])\\n\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;stderr\u0026#34;, \u0026#34;output_type\u0026#34;: \u0026#34;stream\u0026#34;, \u0026#34;text\u0026#34;: [ \u0026#34;Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-14.887081..17.92659].\\n\u0026#34;, \u0026#34;Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-0.11195281..0.91997355].\\n\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;stdout\u0026#34;, \u0026#34;output_type\u0026#34;: \u0026#34;stream\u0026#34;, \u0026#34;text\u0026#34;: [ \u0026#34;torch.Size([1, 4, 32, 32]) torch.Size([3, 256, 256])\\n\u0026#34; ] }, { \u0026#34;data\u0026#34;: { \u0026#34;image/png\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;text/plain\u0026#34;: [ \u0026#34;\u0026lt;Figure size 640x480 with 4 Axes\u0026gt;\u0026#34; ] }, \u0026#34;metadata\u0026#34;: {}, \u0026#34;output_type\u0026#34;: \u0026#34;display_data\u0026#34; } ], \u0026#34;source\u0026#34;: [ \u0026#34;import matplotlib.pyplot as plt\\n\u0026#34;, \u0026#34;import torchvision\\n\u0026#34;, \u0026#34;fig,ax = plt.subplots(2,2)\\n\u0026#34;, \u0026#34;\\n\u0026#34;, \u0026#34;\\n\u0026#34;, \u0026#34;# outputs x,loss\\n\u0026#34;, \u0026#34;for i in range(2):\\n\u0026#34;, \u0026#34; ind = torch.randint(0,len(dataset),size=(1,))\\n\u0026#34;, \u0026#34; datapt = dataset[ind][0]\\n\u0026#34;, \u0026#34; model_out = full_vae.decode(datapt.to(\u0026#39;cpu\u0026#39;))[0].to(\u0026#39;cpu\u0026#39;)\\n\u0026#34;, \u0026#34; print(datapt.shape,model_out.shape)\\n\u0026#34;, \u0026#34; with torch.no_grad():\\n\u0026#34;, \u0026#34; ax[i][0].imshow(datapt.squeeze(0).permute(1,2,0))\\n\u0026#34;, \u0026#34; ax[i][1].imshow(model_out.permute(1,2,0))\\n\u0026#34;, \u0026#34;\\n\u0026#34; ] } ], \u0026#34;metadata\u0026#34;: { \u0026#34;kernelspec\u0026#34;: { \u0026#34;display_name\u0026#34;: \u0026#34;manimtest\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;python3\u0026#34; }, \u0026#34;language_info\u0026#34;: { \u0026#34;codemirror_mode\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;ipython\u0026#34;, \u0026#34;version\u0026#34;: 3 }, \u0026#34;file_extension\u0026#34;: \u0026#34;.py\u0026#34;, \u0026#34;mimetype\u0026#34;: \u0026#34;text/x-python\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;nbconvert_exporter\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;pygments_lexer\u0026#34;: \u0026#34;ipython3\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;3.12.7\u0026#34; } }, \u0026#34;nbformat\u0026#34;: 4, \u0026#34;nbformat_minor\u0026#34;: 2 } beleive it or not, the image/png was much longer, I just clipped the size.\nNow, let\u0026rsquo;s outline the high-level structure of our data:\n1. \u0026#34;cells\u0026#34;, overall wrapper (list) 2. dictionary for each cell: \u0026#34;cell_type\u0026#34;/\u0026#34;source\u0026#34;: specify cell-type, metadata, outputs 3. Outputs: divided into the different \u0026#39;types\u0026#39; of outputs, with names and So, here is code to print the high-level information\nurl = \u0026#34;https://raw.githubusercontent.com/chuckles201/DiT-Implementation/refs/heads/main/VAE/download.ipynb\u0026#34; # requesting url r = requests.get(url=url) # getting dict r = json.loads(r.text) for i in range(len(r[\u0026#34;cells\u0026#34;])): ct = r[\u0026#34;cells\u0026#34;][i][\u0026#34;cell_type\u0026#34;] print(f\u0026#34;{ct}_#{i} keys: {r[\u0026#34;cells\u0026#34;][i].keys()}\u0026#34;) Output:\nmarkdown_#0 keys: dict_keys([\u0026#39;cell_type\u0026#39;, \u0026#39;metadata\u0026#39;, \u0026#39;source\u0026#39;]) code_#1 keys: dict_keys([\u0026#39;cell_type\u0026#39;, \u0026#39;execution_count\u0026#39;, \u0026#39;metadata\u0026#39;, \u0026#39;outputs\u0026#39;, \u0026#39;source\u0026#39;]) code_#2 keys: dict_keys([\u0026#39;cell_type\u0026#39;, \u0026#39;execution_count\u0026#39;, \u0026#39;metadata\u0026#39;, \u0026#39;outputs\u0026#39;, \u0026#39;source\u0026#39;]) \u0026lsquo;Connecting\u0026rsquo; post and program Let\u0026rsquo;s start with the easy part; writing our markdown to our file.\nWe\u0026rsquo;ll create a dictionary of all the post-files and all of the urls, and for each post-file, we\u0026rsquo;ll create a shortcode that does nothing, but specifies where we want our python file to start/stop the jupyter notebook.\nHere\u0026rsquo;s the program:\ncode\rimport os import sys import requests import json import regex as re ### Helper functions ### # function to write at specific # location in file def write_mdfile(start_token,stop_token,file,to_write): with open(file,\u0026#39;r\u0026#39;) as file_read: text = file_read.read() # split any new-line # parethesis preserve info tokens = re.split(r\u0026#39;(\\n+)\u0026#39;,text) # replace all-inbetween! try: start = tokens.index(start_token) stop = tokens.index(stop_token) except: raise Exception(\u0026#34;Missing note-b token\u0026#34;) tokens = [(tokens[i]) for i in range(len(tokens)) if i\u0026gt;stop or i\u0026lt;start] # append to_write (note-b) tokens.insert(start,to_write) # inserting before/after the tokens... tokens.insert(start+1,stop_token) tokens.insert(start,start_token) # writing back to file with open(file,\u0026#39;w\u0026#39;) as file_write: file_write.write(\u0026#34;\u0026#34;.join(tokens)) This allows us to write to any markdown file, as long as we have our special start/top shortcodes, which we can easily include.\nNow, let\u0026rsquo;s iterate through the dictionary of \u0026lsquo;connected\u0026rsquo; posts and urls, and write the url for each post, given our start/stop tokens.\ncode\rimport os import sys import requests import json import regex as re ### Helper functions ### # function to write at specific # location in file def write_mdfile(start_token,stop_token,file,to_write): with open(file,\u0026#39;r\u0026#39;) as file_read: text = file_read.read() # split any new-line # parethesis preserve info tokens = re.split(r\u0026#39;(\\n+)\u0026#39;,text) # replace all-inbetween! try: start = tokens.index(start_token) stop = tokens.index(stop_token) except: raise Exception(\u0026#34;Missing note-b token\u0026#34;) tokens = [(tokens[i]) for i in range(len(tokens)) if i\u0026gt;stop or i\u0026lt;start] # append to_write (note-b) tokens.insert(start,to_write) # inserting before/after the tokens... tokens.insert(start+1,stop_token) tokens.insert(start,start_token) # writing back to file with open(file,\u0026#39;w\u0026#39;) as file_write: file_write.write(\u0026#34;\u0026#34;.join(tokens)) def json_to_md(data): return data ### MAIN PROGRAM ### def main(): # retreive url with open(\u0026#39;post_to_url.json\u0026#39;,\u0026#39;r\u0026#39;) as f: post_url_dict = json.load(f) for post in list(post_url_dict.keys()): url = post_url_dict[post] # requesting url r = requests.get(url) # getting dict # adding \\n for correctness r = str(r.text)[:1000] r = \u0026#34;\u0026#34;.join([\u0026#34;\\n\u0026#34;,\u0026#34;```json\u0026#34;,r,\u0026#34;```\u0026#34;,\u0026#34;\\n\u0026#34;]) # parsing text... to_write = json_to_md(r) # quick # creating file path = os.path.abspath(f\u0026#39;../blog/content/posts/{post}.md\u0026#39;) write_mdfile(start_token=\u0026#34;{{ jupyter_token_start \u0026gt;}}\u0026#34;, stop_token=\u0026#34;{{ jupyter_token_end \u0026gt;}}\u0026#34;, file=path, to_write=to_write) print(\u0026#34;**********\u0026#34;) print(f\u0026#34;Wrote file: {path}\\nFrom URL: {url} ({len(r)} chars)\u0026#34;) print(\u0026#34;**********\u0026#34;) main() One last note, is that we may want to have our delimiter have \u0026lsquo;%\u0026rsquo; tags instead of \u0026lsquo;\u0026lt;\u0026gt;\u0026rsquo; so we can inject markdown.\nDealing with markdown cell The markdown cell is the easiest, we simply will load in the markdown as-is (and add a new-line). I am saving all of the \u0026lsquo;stream\u0026rsquo; of cell-data into one-list.\nBasically, all we\u0026rsquo;ll need to do for the markdown is to take the \u0026rsquo;list\u0026rsquo; of strings (each new line seperates a new element) and join them into one-long steam, and add a \\n to have a new-line.\nhere is the code so far:\ncode\rdef json_to_md(data_dict): # list of cells cells = data_dict[\u0026#34;cells\u0026#34;] # other info (like language) metadata = data_dict[\u0026#34;metadata\u0026#34;] # full string/file data_stream = [] # for each cell which is a dictionary # with source,outputs, for i, cell in enumerate(cells): # markdown cell if cell[\u0026#34;cell_type\u0026#34;] == \u0026#34;markdown\u0026#34;: # list of elements lines = cell[\u0026#34;source\u0026#34;] lines.append(\u0026#34;\\n\u0026#34;) # concat lines = \u0026#34;\u0026#34;.join(lines) data_stream.append(lines) elif cell[\u0026#34;cell_type\u0026#34;] == \u0026#34;code\u0026#34;: pass this works.\nCode-Cell Now we need to do the same thing, accept add our three ` and specify the language. Luckily, this part will be very easy, and very similar to our markdown (we\u0026rsquo;re not working on outputs yet.)\ncode\relif cell[\u0026#34;cell_type\u0026#34;] == \u0026#34;code\u0026#34;: ####### SOURCE ####### # list of elements lines = cell[\u0026#34;source\u0026#34;] # for code-formatting lines.append(\u0026#34;```\\n\u0026#34;) lines.insert(0,f\u0026#34;```{language}\\n\u0026#34;) # concat lines = \u0026#34;\u0026#34;.join(lines) data_stream.append(lines) ######################### Code-Cell: Outputs Now ket\u0026rsquo;s deal with the actual outputs of our code-cell, we\u0026rsquo;ll be loading it the same way as jupyter, which is: Text, and then Image.\nOutputs are lists of dictionaries, where each dictionary is a unique \u0026rsquo;type\u0026rsquo; of output, for example we can have \u0026rsquo;error\u0026rsquo; messages from the terminal, images, and then the actual code-output.\nText To deal with out text-outputs, we\u0026rsquo;ll iterate through the list of dictionaries, and check what-type the output is. We\u0026rsquo;ll just check if the text is \u0026lsquo;stream\u0026rsquo;, and then output based on this.Here are the types of streams:\nstderr: warnings/messages from console stdout output-code we\u0026rsquo;ll highlight the stderr specially, as it is a warning (eventually)\u0026hellip;\nWe\u0026rsquo;ll also create a special-output-box for our output so that it formats nicely on our site.\nSo far, all we\u0026rsquo;re doing is understanding the stucture of the dictionary that we get from our raw content, and then we simply load the outputs in-order, and append them to a list (which is then concatenated into a string). Once we do this, and we can add custom-formatting in the form of short-codes, but I\u0026rsquo;m making it simplistic for now.\nFor our code-cells since we have to deal with both \u0026lsquo;stream\u0026rsquo; and \u0026lsquo;data\u0026rsquo; ouputs, we iterate through all of the dictionaries inside of our cell-dictionary and siplay them in the same order.\nSince this got a little messy for me, here is the structure of the outputs:\n|Outputs (list) | | Dictionary 1 | | Type | | Output | | Dictionary 2 | | Type | | Output | | Dictionary~(Data) | | Data: | | Text/plain | | Image So the outputs are a list of dictionaries, and each dictionary contains both the information, and data about the information. And it is displayed in order, so we iterate through the list of dictionaries, and display each in order.\nHowever, when we have \u0026lsquo;data\u0026rsquo; which is plain text/images, we have to acess another dictionary. I\u0026rsquo;m not sure why they structured it this way, but it\u0026rsquo;s what we\u0026rsquo;re working with.\nImages Now, we\u0026rsquo;ll have to convert images in our cell-outputs into, well, images.\nFirst, let\u0026rsquo;s deal with the simple case where images are stored in BASE-64 format, which is a format used for JSON, where bits are encoded with printable characters.\nHere is a high-level view of the implementation of the function:\nWe take the image-string/file-extentsion We create a new path for the image, which will be loaded from markdown. We convert the base64 to binary see here We save the image, and then insert a shortcode to load it: Image-Converter: code\rdef image_base64_save(raw_data,path_to_save): # binary-writing-pdf def bytes_to_img(raw_str,save_path): # decode to bytes raw_bytes = base64.b64decode(raw_str) # temporary file image = Image.open(BytesIO(raw_bytes)) # show image! image.save(f\u0026#34;{save_path}\u0026#34;) bytes_to_img(raw_data,path_to_save) Usage:\ncode\r### IMG-CONVERT ### img_in = False image_types = [\u0026#34;png\u0026#34;,\u0026#34;jpg\u0026#34;,\u0026#34;jpeg\u0026#34;,\u0026#34;img\u0026#34;,\u0026#34;webp\u0026#34;,\u0026#34;gif\u0026#34;,\u0026#34;pdf\u0026#34;,\u0026#34;svg\u0026#34;,\u0026#34;eps\u0026#34;] img_ext = \u0026#34;\u0026#34; for type in image_types: if f\u0026#34;image/{type}\u0026#34; in list(output[\u0026#34;data\u0026#34;].keys()): img_in = True img_ext = type if img_in: start = \u0026#34;\\n\u0026#34; if not need_end: start = \u0026#39;\\n{\u0026lt; code_output summary=\u0026#34;Output:\u0026#34; open=\u0026#34;true\u0026#34; \u0026gt;}\\n\u0026#39; need_end = True end = str(\u0026#34;{\u0026lt;/ code_output br \u0026gt;}\\n\u0026#34;) need_end = False # got end # saving image at path! raw_data = output[\u0026#34;data\u0026#34;][f\u0026#34;image/{img_ext}\u0026#34;] # making sure path is correct img_name = f\u0026#34;cell_{i}_img.png\u0026#34; path_img_new = \u0026#34;\u0026#34;.join([path_img, f\u0026#34;/{img_name}\u0026#34;]) helpers.image_base64_save(raw_data=raw_data, path_to_save=path_img_new) # not using /blog/static in md (implied) # saving with image name path_img_abs = path_img_new.split(\u0026#34;/blog/static\u0026#34;)[1] print(f\u0026#34;PATH SAVED: {path_img_new}\u0026#34;) print(f\u0026#34;PATH MD: {path_img_abs}\u0026#34;) img_data = f\u0026#39;{\u0026lt; image_output src=\u0026#34;{path_img_abs}\u0026#34; }\u0026#39; lines = [start] lines.append(img_data) lines.append(end) data_stream.append(\u0026#34;\u0026#34;.join(lines)) ######################3 Note: I messed around with the code a little so shortcodes did not accidentally render on this page.\nThe main issue was dealing with the file extensions (saving vs. loading, because hugo assumes static directory), but that was easily fixed with some trial/error.\nOther fixes Another little problem I ran into was dealing with \u0026lsquo;\u0026lt;\u0026gt;\u0026rsquo; type-strings (they render as html) in our outputs, to deal with this, I had to learn how to replace all \u0026lsquo;\u0026lt;\u0026gt;\u0026rsquo; with their correspinding strings in regex, unless we actually wanted the short code. Here is that:\ncode\rimport regex as re def format_out(text): # Replace `\u0026lt;` with `\u0026amp;lt;` only if not preceeded by `{{\u0026#39; pattern = r\u0026#39;(?\u0026lt;![{{])\u0026lt;\u0026#39; replacement = \u0026#34;\u0026amp;lt;\u0026#34; text = re.sub(pattern,replacement,text) # preceeds two characters pattern = r\u0026#39;\u0026gt;(?![}}])\u0026#39; replacement = \u0026#34;\u0026amp;gt;\u0026#34; text = re.sub(pattern,replacement,text) return text Beautifying Now that we can load in markdown, code, and code-outputs, I tried to make the outputs actually look-nice.\nI basically just tried new CSS, and looked at what looked visually appealing. The code-display I settled on is currently displaying on this page.\nNote: Don\u0026rsquo;t insert new scripts into page, it will affect everything! Create a new class and modify its CSS to play-around.\nI also made the choice to keep seperate collapsable boxes for each code-block, but if a code block directly followed another without an output, i left out an indent, while if an output followed, I kept an indent. This is because multiple succesive blocks without outputs are likely continualy building on eachother.\nLeaving side-notes I also wanted to add a way, so that in a given cell, I can leave a side-note (for editing in the website now), like a source being cited, or an explanation.\nI don\u0026rsquo;t know if this is viable, because it makes the viewing experience more strenous, and will require some finicking with the CSS for now.\nAdding other files Ok, now we can easily generalize our program to check for different start/end tokens, and based on the token, load the raw-text differently. We can easily just have \u0026rsquo;token_start_python(or-any-other-language)\u0026rsquo; and just load the raw-file; this is in case for some reason we wanted a post dedicated to a single file (or just any page.)\nExample of .ipynb (jupyter notebooks): test_ipynb Example of python (or any other language): raw_test Streamlining/\u0026lsquo;1-execution\u0026rsquo; Now, finally we\u0026rsquo;ll write a bash program that:\nInitialiazes/connects our site-repository. (remote origin) Run\u0026rsquo;s the update-script, builds the website, and pushes them to github automatically Then, automatically goes into our JupyterToMd repository, and saves any updates we may have made here Review/Learning Experience ","permalink":"https://chuckles201.github.io/posts/jupyter_converter/","summary":"\u003cp\u003eHere, we\u0026rsquo;ll be parsing our jupyter notebook from a random github link, and reading it out into markdown:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eMarkdown = markdown\u003c/li\u003e\n\u003cli\u003eCode = markdown code block\u003c/li\u003e\n\u003cli\u003eCode output = Images/code block\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFurthermore, we will fetch a github repo and automatically update it, when the file at the given like has been updated.\u003c/p\u003e\n\u003cp\u003eLatstly, we\u0026rsquo;ll be able to stack multiple notebooks into one \u0026lsquo;project\u0026rsquo;.\u003c/p\u003e\n\u003ch2 id=\"running-scripts-on-website\"\u003eRunning scripts on website\u003c/h2\u003e\n\u003cp\u003eSince our site is static, we\u0026rsquo;ll need to have a built-in link to displaying our github page, and automatically converting it to markdown somehow inbetween.\u003c/p\u003e","title":"Jupyter-To-Site"},{"content":"New-posts: To create posts, just use\nhugo new /posts/name.md and then edit the markdown!\nEditing our themes/other settings: Go into our config file, and follow documentation of your theme. Also, to add new link, just create the file, the url, and then link the layout to a folder in the theme!\nmenu: main: - identifier: categories name: Categories weight: 10 url: /categories/ - identifier: archives name: Archives weight: 20 url: /archives/ - identifier: tags name: Tags weight: 30 url: /tags/ more params:\n# parameters/theme-varaibles params: # title homeInfoParams: Title: \u0026#34;I am Charlie.\u0026#34; Content: \u0026#34;Welcome\u0026#34; socialIcons: - name: github url: \u0026#39;github.com\u0026#39; # for image cover: linkFullImages: True # misc site-variables ShowBreadCrumbs: False ShowCodeCopyButtons: True disableSpecial1stPost: True # how to get commnents? comments: True Uploading to Github First, we intialize the repo chuckles201.github.io, which will be the link to our site.\nWe build our website in a different folder with the \u0026lsquo;hugo\u0026rsquo; command\nAdding Latex/Code Now, we need to add functionality for latex for our site.\nFirst, we create an extend_head.html file, and then we enable math: true in our config params portion.\n$$ p(awesome_{latex})\\ncong \\sum_{3}^{4}\\int_{assssss}^{} $$\nif we have $p(x) = \\sum_{3}^{4}$ we can do inline latex!\nwhich looks like:\n$$ p(awesome_{latex})\\ncong \\sum_{3}^{4}\\int_{assssss}^{} $$ if we have $p(x) = \\sum_{3}^{4}$ we can do inline latex! Adding Code Now, if we want to be able to add good-looking code, we can do the following with our params:\nmarkup: highlight: codeFences: true # Enable syntax highlighting for code fences guessSyntax: true # Automatically detect language if not specified lineNos: true # Display line numbers noClasses: false # Use CSS classes instead of inline styles style: monokai # Choose a theme (e.g., monokai, dracula, etc.) and we can run\nhugo gen chromastyles -h to see different styles.\nHere is some code\nprint(\u0026#34;hello\u0026#34;) if function is false: return function Expanding/Contracting codeblocks Now, let\u0026rsquo;s add functionality to be able to specify for our content, when we want it to be collapsable.\nTo do this, we simply need to load the markdown as normal, but just surround it as folllows (when we build the site):\n\u0026lt;details\u0026gt;\u0026lt;summary=\u0026#34;hello\u0026#34;\u0026gt;\u0026lt;/summary\u0026gt; ...code here \u0026lt;/details\u0026gt; .\nLet\u0026rsquo;s code a php file to check for the details part, and then we can implement it in our code!\nCode\r\u0026lt;details {{ if .Get \u0026#34;open\u0026#34; }}open{{ end }}\u0026gt; \u0026lt;summary\u0026gt;{{ .Get \u0026#34;summary\u0026#34; | default \u0026#34;Click to expand\u0026#34; }}\u0026lt;/summary\u0026gt; {{ .Inner | markdownify }} \u0026lt;/details\u0026gt; This code basically allows usability of \u0026lsquo;details\u0026rsquo; html tag, and defines how it should be used.\nWe can also call it inside of code-blocks:\npython\rimport hello import goodbye\ndef advice(): return \u0026ldquo;make sure to include And for anything else:\nFormula\r$$ p_n{4} $$\rHighlighting for code-block As you may have noticed, our code block did not higlight- that is becuse seemingly our text-inside is being rendered as raw-html.\nSo, we will neeed to wrap it with a div, and add higlighting as per normal markdown-code display.\nFirst, we create our /partials/shortcode/div.html shortcode to allow us to include \u0026lsquo;div\u0026rsquo; in our .md file. Shortcodes more broadly allow us to include any html in our markdown, but we must previously include it in our shortcodes file.\nunfortunately, I could not find any good solutions, and I will have to fight this battle another day\u0026hellip;\n","permalink":"https://chuckles201.github.io/posts/walkthru_site/","summary":"\u003ch3 id=\"new-posts\"\u003eNew-posts:\u003c/h3\u003e\n\u003cp\u003eTo create posts, just use\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehugo new /posts/name.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand then edit the markdown!\u003c/p\u003e\n\u003ch3 id=\"editing-our-themesother-settings\"\u003eEditing our themes/other settings:\u003c/h3\u003e\n\u003cp\u003eGo into our config file, and follow documentation of your theme. Also, to add new link, just create the file, the url, and then link the layout to a folder in the theme!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003emenu\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003emain\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        - \u003cspan style=\"color:#f92672\"\u003eidentifier\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003ecategories\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eCategories\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003eweight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003eurl\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/categories/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        - \u003cspan style=\"color:#f92672\"\u003eidentifier\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003earchives\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eArchives\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003eweight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003eurl\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/archives/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        - \u003cspan style=\"color:#f92672\"\u003eidentifier\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003etags\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003ename\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003eTags\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003eweight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#f92672\"\u003eurl\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/tags/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://github.com/adityatelange/hugo-PaperMod/wiki/Variables\"\u003emore params:\u003c/a\u003e\u003c/p\u003e","title":"Setting up Hugo PaperMod site!"},{"content":" 1. Sharing Knowledge With this blog I aim to share my projects, which are manifestations of my learning through my own thinking, and learning from the knowledge created by others.\nI will attempt to make this blog high-quality, educational, and dense in knowledge/learning; and importantly, everything I will share will (hopefully) be interesting/worth sharing.\n2. Community I am writing here, because I beleive that sharing with the community is a great way to motivate myself, and to truly push myself to further understand. I hope that you comment on my post, share feedback, and take-part!\nI\u0026rsquo;d imagine something like this to describe why sharing with the community can be beneficial:\nWhile this is very un-nuanced, I still think it is good, and somewhat describes why knowledge should be shared!\n3. Depth of knowledge The most important part of this blog is learning and deeply understanding. With every project/post, I will be asking the question: how can I dig deeper? This inevitably involves building-things out and challenging the mind with \u0026lsquo;mental (work)thinkouts\u0026rsquo;, and thinking through/spending time with subjects, trying to understand 🧠.\n","permalink":"https://chuckles201.github.io/manifesto/","summary":"manifesto","title":"Blog Manifesto"}]